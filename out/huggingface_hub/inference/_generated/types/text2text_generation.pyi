from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any

Text2TextGenerationTruncationStrategy: Incomplete

@dataclass
class Text2TextGenerationParameters(BaseInferenceType):
    clean_up_tokenization_spaces: bool | None = ...
    generate_parameters: dict[str, Any] | None = ...
    truncation: Text2TextGenerationTruncationStrategy | None = ...
    def __init__(self, clean_up_tokenization_spaces=..., generate_parameters=..., truncation=...) -> None: ...

@dataclass
class Text2TextGenerationInput(BaseInferenceType):
    inputs: str
    parameters: Text2TextGenerationParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class Text2TextGenerationOutput(BaseInferenceType):
    generated_text: Any
    text2_text_generation_output_generated_text: str | None = ...
    def __init__(self, generated_text, text2_text_generation_output_generated_text=...) -> None: ...
