from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass

ImageSegmentationSubtask: Incomplete

@dataclass
class ImageSegmentationParameters(BaseInferenceType):
    mask_threshold: float | None = ...
    overlap_mask_area_threshold: float | None = ...
    subtask: ImageSegmentationSubtask | None = ...
    threshold: float | None = ...
    def __init__(self, mask_threshold=..., overlap_mask_area_threshold=..., subtask=..., threshold=...) -> None: ...

@dataclass
class ImageSegmentationInput(BaseInferenceType):
    inputs: str
    parameters: ImageSegmentationParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class ImageSegmentationOutputElement(BaseInferenceType):
    label: str
    mask: str
    score: float | None = ...
    def __init__(self, label, mask, score=...) -> None: ...
