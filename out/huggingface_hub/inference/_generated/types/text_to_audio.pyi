from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any

TextToAudioEarlyStoppingEnum: Incomplete

@dataclass
class TextToAudioGenerationParameters(BaseInferenceType):
    do_sample: bool | None = ...
    early_stopping: bool | TextToAudioEarlyStoppingEnum | None = ...
    epsilon_cutoff: float | None = ...
    eta_cutoff: float | None = ...
    max_length: int | None = ...
    max_new_tokens: int | None = ...
    min_length: int | None = ...
    min_new_tokens: int | None = ...
    num_beam_groups: int | None = ...
    num_beams: int | None = ...
    penalty_alpha: float | None = ...
    temperature: float | None = ...
    top_k: int | None = ...
    top_p: float | None = ...
    typical_p: float | None = ...
    use_cache: bool | None = ...
    def __init__(self, do_sample=..., early_stopping=..., epsilon_cutoff=..., eta_cutoff=..., max_length=..., max_new_tokens=..., min_length=..., min_new_tokens=..., num_beam_groups=..., num_beams=..., penalty_alpha=..., temperature=..., top_k=..., top_p=..., typical_p=..., use_cache=...) -> None: ...

@dataclass
class TextToAudioParameters(BaseInferenceType):
    generate: TextToAudioGenerationParameters | None = ...
    def __init__(self, generate=...) -> None: ...

@dataclass
class TextToAudioInput(BaseInferenceType):
    inputs: str
    parameters: TextToAudioParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class TextToAudioOutput(BaseInferenceType):
    audio: Any
    sampling_rate: Any
    text_to_audio_output_sampling_rate: float | None = ...
    def __init__(self, audio, sampling_rate, text_to_audio_output_sampling_rate=...) -> None: ...
