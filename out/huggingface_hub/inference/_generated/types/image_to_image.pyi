from .base import BaseInferenceType as BaseInferenceType
from dataclasses import dataclass
from typing import Any

@dataclass
class ImageToImageTargetSize(BaseInferenceType):
    height: int
    width: int
    def __init__(self, height, width) -> None: ...

@dataclass
class ImageToImageParameters(BaseInferenceType):
    guidance_scale: float | None = ...
    negative_prompt: list[str] | None = ...
    num_inference_steps: int | None = ...
    target_size: ImageToImageTargetSize | None = ...
    def __init__(self, guidance_scale=..., negative_prompt=..., num_inference_steps=..., target_size=...) -> None: ...

@dataclass
class ImageToImageInput(BaseInferenceType):
    inputs: str
    parameters: ImageToImageParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class ImageToImageOutput(BaseInferenceType):
    image: Any
    def __init__(self, image) -> None: ...
