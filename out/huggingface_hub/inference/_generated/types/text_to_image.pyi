from .base import BaseInferenceType as BaseInferenceType
from dataclasses import dataclass
from typing import Any

@dataclass
class TextToImageTargetSize(BaseInferenceType):
    height: int
    width: int
    def __init__(self, height, width) -> None: ...

@dataclass
class TextToImageParameters(BaseInferenceType):
    guidance_scale: float | None = ...
    negative_prompt: list[str] | None = ...
    num_inference_steps: int | None = ...
    scheduler: str | None = ...
    seed: int | None = ...
    target_size: TextToImageTargetSize | None = ...
    def __init__(self, guidance_scale=..., negative_prompt=..., num_inference_steps=..., scheduler=..., seed=..., target_size=...) -> None: ...

@dataclass
class TextToImageInput(BaseInferenceType):
    inputs: str
    parameters: TextToImageParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class TextToImageOutput(BaseInferenceType):
    image: Any
    def __init__(self, image) -> None: ...
