import fsspec
from . import constants as constants
from ._commit_api import CommitOperationCopy as CommitOperationCopy, CommitOperationDelete as CommitOperationDelete
from .errors import EntryNotFoundError as EntryNotFoundError, RepositoryNotFoundError as RepositoryNotFoundError, RevisionNotFoundError as RevisionNotFoundError
from .file_download import hf_hub_url as hf_hub_url, http_get as http_get
from .hf_api import HfApi as HfApi, LastCommitInfo as LastCommitInfo, RepoFile as RepoFile
from .utils import HFValidationError as HFValidationError, hf_raise_for_status as hf_raise_for_status, http_backoff as http_backoff
from _typeshed import Incomplete
from collections.abc import Generator
from dataclasses import dataclass
from datetime import datetime
from requests import Response as Response
from typing import Any

SPECIAL_REFS_REVISION_REGEX: Incomplete

@dataclass
class HfFileSystemResolvedPath:
    repo_type: str
    repo_id: str
    revision: str
    path_in_repo: str
    def unresolve(self) -> str: ...
    def __init__(self, repo_type, repo_id, revision, path_in_repo, _raw_revision=...) -> None: ...

class HfFileSystem(fsspec.AbstractFileSystem):
    root_marker: str
    protocol: str
    endpoint: Incomplete
    token: Incomplete
    def __init__(self, *args, endpoint: str | None = None, token: bool | str | None = None, **storage_options) -> None: ...
    def resolve_path(self, path: str, revision: str | None = None) -> HfFileSystemResolvedPath: ...
    def invalidate_cache(self, path: str | None = None) -> None: ...
    def rm(self, path: str, recursive: bool = False, maxdepth: int | None = None, revision: str | None = None, **kwargs) -> None: ...
    def ls(self, path: str, detail: bool = True, refresh: bool = False, revision: str | None = None, **kwargs) -> list[str | dict[str, Any]]: ...
    def walk(self, path, *args, **kwargs) -> Generator[Incomplete, Incomplete]: ...
    def glob(self, path, **kwargs): ...
    def find(self, path: str, maxdepth: int | None = None, withdirs: bool = False, detail: bool = False, refresh: bool = False, revision: str | None = None, **kwargs) -> list[str] | dict[str, dict[str, Any]]: ...
    def cp_file(self, path1: str, path2: str, revision: str | None = None, **kwargs) -> None: ...
    def modified(self, path: str, **kwargs) -> datetime: ...
    def info(self, path: str, refresh: bool = False, revision: str | None = None, **kwargs) -> dict[str, Any]: ...
    def exists(self, path, **kwargs): ...
    def isdir(self, path): ...
    def isfile(self, path): ...
    def url(self, path: str) -> str: ...
    def get_file(self, rpath, lpath, callback=..., outfile: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def transaction(self) -> None: ...
    def start_transaction(self) -> None: ...

class HfFileSystemFile(fsspec.spec.AbstractBufferedFile):
    resolved_path: Incomplete
    details: Incomplete
    fs: Incomplete
    def __init__(self, fs: HfFileSystem, path: str, revision: str | None = None, **kwargs) -> None: ...
    def __del__(self) -> None: ...
    def read(self, length: int = -1): ...
    def url(self) -> str: ...

class HfFileSystemStreamFile(fsspec.spec.AbstractBufferedFile):
    resolved_path: Incomplete
    details: Incomplete
    response: Incomplete
    fs: Incomplete
    def __init__(self, fs: HfFileSystem, path: str, mode: str = 'rb', revision: str | None = None, block_size: int = 0, cache_type: str = 'none', **kwargs) -> None: ...
    def seek(self, loc: int, whence: int = 0): ...
    def read(self, length: int = -1): ...
    def url(self) -> str: ...
    def __del__(self) -> None: ...
    def __reduce__(self): ...

def safe_revision(revision: str) -> str: ...
def safe_quote(s: str) -> str: ...
def reopen(fs: HfFileSystem, path: str, mode: str, block_size: int, cache_type: str): ...

parent: Incomplete
parent_doc: Incomplete
