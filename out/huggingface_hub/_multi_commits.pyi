from ._commit_api import CommitOperationAdd as CommitOperationAdd, CommitOperationDelete as CommitOperationDelete
from .community import DiscussionWithDetails as DiscussionWithDetails
from .hf_api import HfApi as HfApi
from .utils import experimental as experimental
from .utils.insecure_hashlib import sha256 as sha256
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Iterable

class MultiCommitException(Exception): ...

MULTI_COMMIT_PR_DESCRIPTION_TEMPLATE: str
MULTI_COMMIT_PR_COMPLETION_COMMENT_TEMPLATE: str
MULTI_COMMIT_PR_CLOSING_COMMENT_TEMPLATE: str
MULTI_COMMIT_PR_CLOSE_COMMENT_FAILURE_NO_CHANGES_TEMPLATE: str
MULTI_COMMIT_PR_CLOSE_COMMENT_FAILURE_BAD_REQUEST_TEMPLATE: str
STEP_ID_REGEX: Incomplete

def plan_multi_commits(operations: Iterable[CommitOperationAdd | CommitOperationDelete], max_operations_per_commit: int = 50, max_upload_size_per_commit: int = ...) -> tuple[list[list[CommitOperationAdd]], list[list[CommitOperationDelete]]]: ...

@dataclass
class MultiCommitStep:
    operations: list[CommitOperationAdd | CommitOperationDelete]
    id: str = ...
    completed: bool = ...
    def __post_init__(self) -> None: ...
    def __init__(self, operations, completed=...) -> None: ...

@dataclass
class MultiCommitStrategy:
    addition_commits: list[MultiCommitStep]
    deletion_commits: list[MultiCommitStep]
    id: str = ...
    all_steps: set[str] = ...
    def __post_init__(self) -> None: ...
    def __init__(self, addition_commits, deletion_commits) -> None: ...

def multi_commit_create_pull_request(api: HfApi, repo_id: str, commit_message: str, commit_description: str | None, strategy: MultiCommitStrategy, repo_type: str | None, token: str | bool | None = None) -> DiscussionWithDetails: ...
def multi_commit_generate_comment(commit_message: str, commit_description: str | None, strategy: MultiCommitStrategy) -> str: ...
def multi_commit_parse_pr_description(description: str) -> set[str]: ...
