from _typeshed import Incomplete
from contextlib import AbstractContextManager
from typing import BinaryIO

class SliceFileObj(AbstractContextManager):
    fileobj: Incomplete
    seek_from: Incomplete
    read_limit: Incomplete
    def __init__(self, fileobj: BinaryIO, seek_from: int, read_limit: int) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def read(self, n: int = -1): ...
    def tell(self) -> int: ...
    def seek(self, offset: int, whence: int = ...) -> int: ...
    def __iter__(self): ...
