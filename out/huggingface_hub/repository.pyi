import subprocess
from .hf_api import HfApi as HfApi, repo_type_and_id_from_hf_id as repo_type_and_id_from_hf_id
from .lfs import LFS_MULTIPART_UPLOAD_COMMAND as LFS_MULTIPART_UPLOAD_COMMAND
from .utils import SoftTemporaryDirectory as SoftTemporaryDirectory, get_token as get_token, logging as logging, run_subprocess as run_subprocess, tqdm as tqdm, validate_hf_hub_args as validate_hf_hub_args
from _typeshed import Incomplete
from huggingface_hub import constants as constants
from huggingface_hub.repocard import metadata_load as metadata_load, metadata_save as metadata_save
from pathlib import Path
from typing import Callable, TypedDict

logger: Incomplete

class CommandInProgress:
    title: Incomplete
    def __init__(self, title: str, is_done_method: Callable, status_method: Callable, process: subprocess.Popen, post_method: Callable | None = None) -> None: ...
    @property
    def is_done(self) -> bool: ...
    @property
    def status(self) -> int: ...
    @property
    def failed(self) -> bool: ...
    @property
    def stderr(self) -> str: ...
    @property
    def stdout(self) -> str: ...

def is_git_repo(folder: str | Path) -> bool: ...
def is_local_clone(folder: str | Path, remote_url: str) -> bool: ...
def is_tracked_with_lfs(filename: str | Path) -> bool: ...
def is_git_ignored(filename: str | Path) -> bool: ...
def is_binary_file(filename: str | Path) -> bool: ...
def files_to_be_staged(pattern: str = '.', folder: str | Path | None = None) -> list[str]: ...
def is_tracked_upstream(folder: str | Path) -> bool: ...
def commits_to_push(folder: str | Path, upstream: str | None = None) -> int: ...

class PbarT(TypedDict):
    bar: tqdm
    past_bytes: int

class Repository:
    command_queue: list[CommandInProgress]
    local_dir: Incomplete
    skip_lfs_files: Incomplete
    client: Incomplete
    huggingface_token: Incomplete
    def __init__(self, local_dir: str | Path, clone_from: str | None = None, repo_type: str | None = None, token: bool | str = True, git_user: str | None = None, git_email: str | None = None, revision: str | None = None, skip_lfs_files: bool = False, client: HfApi | None = None) -> None: ...
    @property
    def current_branch(self) -> str: ...
    def check_git_versions(self) -> None: ...
    def clone_from(self, repo_url: str, token: bool | str | None = None): ...
    def git_config_username_and_email(self, git_user: str | None = None, git_email: str | None = None): ...
    def git_credential_helper_store(self) -> None: ...
    def git_head_hash(self) -> str: ...
    def git_remote_url(self) -> str: ...
    def git_head_commit_url(self) -> str: ...
    def list_deleted_files(self) -> list[str]: ...
    def lfs_track(self, patterns: str | list[str], filename: bool = False): ...
    def lfs_untrack(self, patterns: str | list[str]): ...
    def lfs_enable_largefiles(self) -> None: ...
    def auto_track_binary_files(self, pattern: str = '.') -> list[str]: ...
    def auto_track_large_files(self, pattern: str = '.') -> list[str]: ...
    def lfs_prune(self, recent: bool = False) -> None: ...
    def git_pull(self, rebase: bool = False, lfs: bool = False): ...
    def git_add(self, pattern: str = '.', auto_lfs_track: bool = False): ...
    def git_commit(self, commit_message: str = 'commit files to HF hub'): ...
    def git_push(self, upstream: str | None = None, blocking: bool = True, auto_lfs_prune: bool = False) -> str | tuple[str, CommandInProgress]: ...
    def git_checkout(self, revision: str, create_branch_ok: bool = False): ...
    def tag_exists(self, tag_name: str, remote: str | None = None) -> bool: ...
    def delete_tag(self, tag_name: str, remote: str | None = None) -> bool: ...
    def add_tag(self, tag_name: str, message: str | None = None, remote: str | None = None): ...
    def is_repo_clean(self) -> bool: ...
    def push_to_hub(self, commit_message: str = 'commit files to HF hub', blocking: bool = True, clean_ok: bool = True, auto_lfs_prune: bool = False) -> None | str | tuple[str, CommandInProgress]: ...
    def commit(self, commit_message: str, branch: str | None = None, track_large_files: bool = True, blocking: bool = True, auto_lfs_prune: bool = False): ...
    def repocard_metadata_load(self) -> dict | None: ...
    def repocard_metadata_save(self, data: dict) -> None: ...
    @property
    def commands_failed(self): ...
    @property
    def commands_in_progress(self): ...
    def wait_for_commands(self) -> None: ...
