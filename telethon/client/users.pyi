from .. import errors as errors, helpers as helpers, hints as hints, utils as utils
from ..errors import MultiError as MultiError, RPCError as RPCError
from ..helpers import retry_range as retry_range
from ..tl import TLRequest as TLRequest, functions as functions, types as types
from .telegramclient import TelegramClient as TelegramClient
from _typeshed import Incomplete

class UserMethods:
    async def __call__(self, request, ordered: bool = False, flood_sleep_threshold: Incomplete | None = None): ...
    async def get_me(self, input_peer: bool = False) -> types.User | types.InputPeerUser: ...
    async def is_bot(self) -> bool: ...
    async def is_user_authorized(self) -> bool: ...
    async def get_entity(self, entity: hints.EntitiesLike) -> hints.Entity | list['hints.Entity']: ...
    async def get_input_entity(self, peer: hints.EntityLike) -> types.TypeInputPeer: ...
    async def get_peer_id(self, peer: hints.EntityLike, add_mark: bool = True) -> int: ...
