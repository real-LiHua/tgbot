import typing
from .. import helpers as helpers, hints as hints, utils as utils
from ..crypto import AES as AES
from ..tl import custom as custom, functions as functions, types as types
from .telegramclient import TelegramClient as TelegramClient
from io import BytesIO as BytesIO

class _CacheType:
    def __init__(self, cls) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def __eq__(self, other): ...

class UploadMethods:
    async def send_file(self, entity: hints.EntityLike, file: hints.FileLike | typing.Sequence[hints.FileLike], *, caption: str | typing.Sequence[str] = None, force_document: bool = False, file_size: int = None, clear_draft: bool = False, progress_callback: hints.ProgressCallback = None, reply_to: hints.MessageIDLike = None, attributes: typing.Sequence[types.TypeDocumentAttribute] = None, thumb: hints.FileLike = None, allow_cache: bool = True, parse_mode: str = (), formatting_entities: list[types.TypeMessageEntity] | list[list[types.TypeMessageEntity]] | None = None, voice_note: bool = False, video_note: bool = False, buttons: hints.MarkupLike | None = None, silent: bool = None, background: bool = None, supports_streaming: bool = False, schedule: hints.DateLike = None, comment_to: int | types.Message = None, ttl: int = None, nosound_video: bool = None, **kwargs) -> list[typing.Any] | typing.Any: ...
    async def upload_file(self, file: hints.FileLike, *, part_size_kb: float = None, file_size: int = None, file_name: str = None, use_cache: type = None, key: bytes = None, iv: bytes = None, progress_callback: hints.ProgressCallback = None) -> types.TypeInputFile: ...
