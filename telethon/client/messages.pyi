import typing
from .. import errors as errors, helpers as helpers, hints as hints, utils as utils
from ..requestiter import RequestIter as RequestIter
from ..tl import functions as functions, types as types
from .telegramclient import TelegramClient as TelegramClient

class _MessagesIter(RequestIter): ...
class _IDsIter(RequestIter): ...

class MessageMethods:
    def iter_messages(self, entity: hints.EntityLike, limit: float = None, *, offset_date: hints.DateLike = None, offset_id: int = 0, max_id: int = 0, min_id: int = 0, add_offset: int = 0, search: str = None, filter: types.TypeMessagesFilter | type[types.TypeMessagesFilter] = None, from_user: hints.EntityLike = None, wait_time: float = None, ids: int | typing.Sequence[int] = None, reverse: bool = False, reply_to: int = None, scheduled: bool = False) -> _MessagesIter | _IDsIter: ...
    async def get_messages(self, *args, **kwargs) -> hints.TotalList | types.Message | None: ...
    async def send_message(self, entity: hints.EntityLike, message: hints.MessageLike = '', *, reply_to: int | types.Message = None, attributes: typing.Sequence[types.TypeDocumentAttribute] = None, parse_mode: str | None = (), formatting_entities: list[types.TypeMessageEntity] | None = None, link_preview: bool = True, file: hints.FileLike | typing.Sequence[hints.FileLike] = None, thumb: hints.FileLike = None, force_document: bool = False, clear_draft: bool = False, buttons: hints.MarkupLike | None = None, silent: bool = None, background: bool = None, supports_streaming: bool = False, schedule: hints.DateLike = None, comment_to: int | types.Message = None, nosound_video: bool = None) -> types.Message: ...
    async def forward_messages(self, entity: hints.EntityLike, messages: hints.MessageIDLike | typing.Sequence[hints.MessageIDLike], from_peer: hints.EntityLike = None, *, background: bool = None, with_my_score: bool = None, silent: bool = None, as_album: bool = None, schedule: hints.DateLike = None, drop_author: bool = None) -> typing.Sequence[types.Message]: ...
    async def edit_message(self, entity: hints.EntityLike | types.Message, message: hints.MessageLike = None, text: str = None, *, parse_mode: str = (), attributes: typing.Sequence[types.TypeDocumentAttribute] = None, formatting_entities: list[types.TypeMessageEntity] | None = None, link_preview: bool = True, file: hints.FileLike = None, thumb: hints.FileLike = None, force_document: bool = False, buttons: hints.MarkupLike | None = None, supports_streaming: bool = False, schedule: hints.DateLike = None) -> types.Message: ...
    async def delete_messages(self, entity: hints.EntityLike, message_ids: hints.MessageIDLike | typing.Sequence[hints.MessageIDLike], *, revoke: bool = True) -> typing.Sequence[types.messages.AffectedMessages]: ...
    async def send_read_acknowledge(self, entity: hints.EntityLike, message: hints.MessageIDLike | typing.Sequence[hints.MessageIDLike] = None, *, max_id: int = None, clear_mentions: bool = False, clear_reactions: bool = False) -> bool: ...
    async def pin_message(self, entity: hints.EntityLike, message: hints.MessageIDLike | None, *, notify: bool = False, pm_oneside: bool = False): ...
    async def unpin_message(self, entity: hints.EntityLike, message: hints.MessageIDLike | None = None, *, notify: bool = False): ...
