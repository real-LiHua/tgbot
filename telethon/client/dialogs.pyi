import typing
from .. import errors as errors, helpers as helpers, hints as hints, utils as utils
from ..requestiter import RequestIter as RequestIter
from ..tl import custom as custom, functions as functions, types as types
from .telegramclient import TelegramClient as TelegramClient
from _typeshed import Incomplete

class _DialogsIter(RequestIter): ...
class _DraftsIter(RequestIter): ...

class DialogMethods:
    def iter_dialogs(self, limit: float = None, *, offset_date: hints.DateLike = None, offset_id: int = 0, offset_peer: hints.EntityLike = ..., ignore_pinned: bool = False, ignore_migrated: bool = False, folder: int = None, archived: bool = None) -> _DialogsIter: ...
    async def get_dialogs(self, *args, **kwargs) -> hints.TotalList: ...
    def iter_drafts(self, entity: hints.EntitiesLike = None) -> _DraftsIter: ...
    async def get_drafts(self, entity: hints.EntitiesLike = None) -> hints.TotalList: ...
    async def edit_folder(self, entity: hints.EntitiesLike = None, folder: int | typing.Sequence[int] = None, *, unpack: Incomplete | None = None) -> types.Updates: ...
    async def delete_dialog(self, entity: hints.EntityLike, *, revoke: bool = False): ...
    def conversation(self, entity: hints.EntityLike, *, timeout: float = 60, total_timeout: float = None, max_messages: int = 100, exclusive: bool = True, replies_are_responses: bool = True) -> custom.Conversation: ...
