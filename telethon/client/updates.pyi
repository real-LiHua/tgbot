import typing
from .. import errors as errors, events as events, utils as utils
from .._updates import GapError as GapError, PrematureEndReason as PrematureEndReason
from ..events.common import EventBuilder as EventBuilder, EventCommon as EventCommon
from ..helpers import get_running_loop as get_running_loop
from ..tl import functions as functions, types as types
from ..version import __version__ as __version__
from .telegramclient import TelegramClient as TelegramClient
from _typeshed import Incomplete

Callback: Incomplete

class UpdateMethods:
    async def set_receive_updates(self, receive_updates): ...
    def run_until_disconnected(self): ...
    def on(self, event: EventBuilder): ...
    def add_event_handler(self, callback: Callback, event: EventBuilder = None): ...
    def remove_event_handler(self, callback: Callback, event: EventBuilder = None) -> int: ...
    def list_event_handlers(self) -> typing.Sequence[tuple[Callback, EventBuilder]]: ...
    async def catch_up(self): ...

class EventBuilderDict:
    client: Incomplete
    update: Incomplete
    others: Incomplete
    def __init__(self, client: TelegramClient, update, others) -> None: ...
    def __getitem__(self, builder): ...
