import typing
from .. import errors as errors, helpers as helpers, hints as hints, utils as utils
from ..requestiter import RequestIter as RequestIter
from ..tl import custom as custom, functions as functions, types as types
from .telegramclient import TelegramClient as TelegramClient
from _typeshed import Incomplete

class _ChatAction:
    def __init__(self, client, chat, action, *, delay, auto_cancel) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args) -> None: ...
    __enter__: Incomplete
    __exit__: Incomplete
    def progress(self, current, total) -> None: ...

class _ParticipantsIter(RequestIter): ...
class _AdminLogIter(RequestIter): ...
class _ProfilePhotoIter(RequestIter): ...

class ChatMethods:
    def iter_participants(self, entity: hints.EntityLike, limit: float = None, *, search: str = '', filter: types.TypeChannelParticipantsFilter = None, aggressive: bool = False) -> _ParticipantsIter: ...
    async def get_participants(self, *args, **kwargs) -> hints.TotalList: ...
    def iter_admin_log(self, entity: hints.EntityLike, limit: float = None, *, max_id: int = 0, min_id: int = 0, search: str = None, admins: hints.EntitiesLike = None, join: bool = None, leave: bool = None, invite: bool = None, restrict: bool = None, unrestrict: bool = None, ban: bool = None, unban: bool = None, promote: bool = None, demote: bool = None, info: bool = None, settings: bool = None, pinned: bool = None, edit: bool = None, delete: bool = None, group_call: bool = None) -> _AdminLogIter: ...
    async def get_admin_log(self, *args, **kwargs) -> hints.TotalList: ...
    def iter_profile_photos(self, entity: hints.EntityLike, limit: int = None, *, offset: int = 0, max_id: int = 0) -> _ProfilePhotoIter: ...
    async def get_profile_photos(self, *args, **kwargs) -> hints.TotalList: ...
    def action(self, entity: hints.EntityLike, action: str | types.TypeSendMessageAction, *, delay: float = 4, auto_cancel: bool = True) -> _ChatAction | typing.Coroutine: ...
    async def edit_admin(self, entity: hints.EntityLike, user: hints.EntityLike, *, change_info: bool = None, post_messages: bool = None, edit_messages: bool = None, delete_messages: bool = None, ban_users: bool = None, invite_users: bool = None, pin_messages: bool = None, add_admins: bool = None, manage_call: bool = None, anonymous: bool = None, is_admin: bool = None, title: str = None) -> types.Updates: ...
    async def edit_permissions(self, entity: hints.EntityLike, user: hints.EntityLike | None = None, until_date: hints.DateLike = None, *, view_messages: bool = True, send_messages: bool = True, send_media: bool = True, send_stickers: bool = True, send_gifs: bool = True, send_games: bool = True, send_inline: bool = True, embed_link_previews: bool = True, send_polls: bool = True, change_info: bool = True, invite_users: bool = True, pin_messages: bool = True) -> types.Updates: ...
    async def kick_participant(self, entity: hints.EntityLike, user: hints.EntityLike | None): ...
    async def get_permissions(self, entity: hints.EntityLike, user: hints.EntityLike = None) -> custom.ParticipantPermissions | None: ...
    async def get_stats(self, entity: hints.EntityLike, message: int | types.Message = None): ...
