import typing
from .. import errors as errors, helpers as helpers, utils as utils
from .._updates import SessionState as SessionState
from ..tl import custom as custom, functions as functions, types as types
from .telegramclient import TelegramClient as TelegramClient
from _typeshed import Incomplete

class AuthMethods:
    def start(self, phone: typing.Callable[[], str] | str = ..., password: typing.Callable[[], str] | str = ..., *, bot_token: str = None, force_sms: bool = False, code_callback: typing.Callable[[], str | int] = None, first_name: str = 'New User', last_name: str = '', max_attempts: int = 3) -> TelegramClient: ...
    async def sign_in(self, phone: str = None, code: str | int = None, *, password: str = None, bot_token: str = None, phone_code_hash: str = None) -> types.User | types.auth.SentCode: ...
    async def sign_up(self, code: str | int, first_name: str, last_name: str = '', *, phone: str = None, phone_code_hash: str = None) -> types.User: ...
    async def send_code_request(self, phone: str, *, force_sms: bool = False, _retry_count: int = 0) -> types.auth.SentCode: ...
    async def qr_login(self, ignored_ids: list[int] = None) -> custom.QRLogin: ...
    session: Incomplete
    async def log_out(self) -> bool: ...
    async def edit_2fa(self, current_password: str = None, new_password: str = None, *, hint: str = '', email: str = None, email_code_callback: typing.Callable[[int], str] = None) -> bool: ...
    async def __aenter__(self): ...
    async def __aexit__(self, *args) -> None: ...
    __enter__: Incomplete
    __exit__: Incomplete
