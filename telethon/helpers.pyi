import enum
import io
from _typeshed import Incomplete
from collections.abc import Generator

class _EntityType(enum.Enum):
    USER = 0
    CHAT = 1
    CHANNEL = 2

def generate_random_long(signed: bool = True): ...
def ensure_parent_dir_exists(file_path) -> None: ...
def add_surrogate(text): ...
def del_surrogate(text): ...
def within_surrogate(text, index, *, length: Incomplete | None = None): ...
def strip_text(text, entities): ...
def retry_range(retries, force_retry: bool = True) -> Generator[Incomplete]: ...
def generate_key_data_from_nonce(server_nonce, new_nonce): ...

class TotalList(list):
    total: int
    def __init__(self, *args, **kwargs) -> None: ...

class _FileStream(io.IOBase):
    def __init__(self, file, *, file_size: Incomplete | None = None) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None: ...
    @property
    def file_size(self): ...
    @property
    def name(self): ...
    def read(self, *args, **kwargs): ...
    def readinto(self, *args, **kwargs): ...
    def write(self, *args, **kwargs): ...
    def fileno(self, *args, **kwargs): ...
    def flush(self, *args, **kwargs): ...
    def isatty(self, *args, **kwargs): ...
    def readable(self, *args, **kwargs): ...
    def readline(self, *args, **kwargs): ...
    def readlines(self, *args, **kwargs): ...
    def seek(self, *args, **kwargs): ...
    def seekable(self, *args, **kwargs): ...
    def tell(self, *args, **kwargs): ...
    def truncate(self, *args, **kwargs): ...
    def writable(self, *args, **kwargs): ...
    def writelines(self, *args, **kwargs): ...
    def close(self, *args, **kwargs) -> None: ...

def get_running_loop(): ...
