from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeInputChatlist as TypeInputChatlist, TypeInputPeer as TypeInputPeer
from _typeshed import Incomplete
from datetime import datetime as datetime

class CheckChatlistInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    def __init__(self, slug: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteExportedInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    slug: Incomplete
    def __init__(self, chatlist: TypeInputChatlist, slug: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditExportedInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    slug: Incomplete
    title: Incomplete
    peers: Incomplete
    def __init__(self, chatlist: TypeInputChatlist, slug: str, title: str | None = None, peers: list['TypeInputPeer'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportChatlistInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    title: Incomplete
    peers: Incomplete
    def __init__(self, chatlist: TypeInputChatlist, title: str, peers: list['TypeInputPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChatlistUpdatesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    def __init__(self, chatlist: TypeInputChatlist) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetExportedInvitesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    def __init__(self, chatlist: TypeInputChatlist) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetLeaveChatlistSuggestionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    def __init__(self, chatlist: TypeInputChatlist) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class HideChatlistUpdatesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    def __init__(self, chatlist: TypeInputChatlist) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class JoinChatlistInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    peers: Incomplete
    def __init__(self, slug: str, peers: list['TypeInputPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class JoinChatlistUpdatesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    peers: Incomplete
    def __init__(self, chatlist: TypeInputChatlist, peers: list['TypeInputPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class LeaveChatlistRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chatlist: Incomplete
    peers: Incomplete
    def __init__(self, chatlist: TypeInputChatlist, peers: list['TypeInputPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
