from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeInputChannel as TypeInputChannel, TypeInputCheckPasswordSRP as TypeInputCheckPasswordSRP, TypeInputPeer as TypeInputPeer
from _typeshed import Incomplete
from datetime import datetime as datetime

class GetBroadcastRevenueStatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    dark: Incomplete
    def __init__(self, peer: TypeInputPeer, dark: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBroadcastRevenueTransactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset: Incomplete
    limit: Incomplete
    def __init__(self, peer: TypeInputPeer, offset: int, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBroadcastRevenueWithdrawalUrlRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    password: Incomplete
    def __init__(self, peer: TypeInputPeer, password: TypeInputCheckPasswordSRP) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBroadcastStatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    dark: Incomplete
    def __init__(self, channel: TypeInputChannel, dark: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMegagroupStatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    dark: Incomplete
    def __init__(self, channel: TypeInputChannel, dark: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessagePublicForwardsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    msg_id: Incomplete
    offset: Incomplete
    limit: Incomplete
    def __init__(self, channel: TypeInputChannel, msg_id: int, offset: str, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessageStatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    msg_id: Incomplete
    dark: Incomplete
    def __init__(self, channel: TypeInputChannel, msg_id: int, dark: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoryPublicForwardsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    offset: Incomplete
    limit: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, offset: str, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoryStatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    dark: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, dark: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class LoadAsyncGraphRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    token: Incomplete
    x: Incomplete
    def __init__(self, token: str, x: int | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
