from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeInputMedia as TypeInputMedia, TypeInputPeer as TypeInputPeer, TypeInputPrivacyRule as TypeInputPrivacyRule, TypeMediaArea as TypeMediaArea, TypeMessageEntity as TypeMessageEntity, TypeReaction as TypeReaction
from _typeshed import Incomplete
from datetime import datetime as datetime

class ActivateStealthModeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    past: Incomplete
    future: Incomplete
    def __init__(self, past: bool | None = None, future: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CanSendStoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteStoriesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class EditStoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    media: Incomplete
    media_areas: Incomplete
    caption: Incomplete
    entities: Incomplete
    privacy_rules: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, media: TypeInputMedia | None = None, media_areas: list['TypeMediaArea'] | None = None, caption: str | None = None, entities: list['TypeMessageEntity'] | None = None, privacy_rules: list['TypeInputPrivacyRule'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportStoryLinkRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAllReadPeerStoriesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAllStoriesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    next: Incomplete
    hidden: Incomplete
    state: Incomplete
    def __init__(self, next: bool | None = None, hidden: bool | None = None, state: str | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChatsToSendRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPeerMaxIDsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list['TypeInputPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class GetPeerStoriesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPinnedStoriesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_id: Incomplete
    limit: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_id: int, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoriesArchiveRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_id: Incomplete
    limit: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_id: int, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoriesByIDRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoriesViewsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoryReactionsListRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    limit: Incomplete
    forwards_first: Incomplete
    reaction: Incomplete
    offset: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, limit: int, forwards_first: bool | None = None, reaction: TypeReaction | None = None, offset: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStoryViewsListRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    offset: Incomplete
    limit: Incomplete
    just_contacts: Incomplete
    reactions_first: Incomplete
    forwards_first: Incomplete
    q: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, offset: str, limit: int, just_contacts: bool | None = None, reactions_first: bool | None = None, forwards_first: bool | None = None, q: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class IncrementStoryViewsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadStoriesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    max_id: Incomplete
    def __init__(self, peer: TypeInputPeer, max_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class ReportRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    option: Incomplete
    message: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int], option: bytes, message: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchPostsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset: Incomplete
    limit: Incomplete
    hashtag: Incomplete
    area: Incomplete
    peer: Incomplete
    def __init__(self, offset: str, limit: int, hashtag: str | None = None, area: TypeMediaArea | None = None, peer: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendReactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    story_id: Incomplete
    reaction: Incomplete
    add_to_recent: Incomplete
    def __init__(self, peer: TypeInputPeer, story_id: int, reaction: TypeReaction, add_to_recent: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendStoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    media: Incomplete
    privacy_rules: Incomplete
    pinned: Incomplete
    noforwards: Incomplete
    fwd_modified: Incomplete
    media_areas: Incomplete
    caption: Incomplete
    entities: Incomplete
    random_id: Incomplete
    period: Incomplete
    fwd_from_id: Incomplete
    fwd_from_story: Incomplete
    def __init__(self, peer: TypeInputPeer, media: TypeInputMedia, privacy_rules: list['TypeInputPrivacyRule'], pinned: bool | None = None, noforwards: bool | None = None, fwd_modified: bool | None = None, media_areas: list['TypeMediaArea'] | None = None, caption: str | None = None, entities: list['TypeMessageEntity'] | None = None, random_id: int = None, period: int | None = None, fwd_from_id: TypeInputPeer | None = None, fwd_from_story: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleAllStoriesHiddenRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hidden: Incomplete
    def __init__(self, hidden: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TogglePeerStoriesHiddenRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    hidden: Incomplete
    def __init__(self, peer: TypeInputPeer, hidden: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TogglePinnedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    pinned: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int], pinned: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class TogglePinnedToTopRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
