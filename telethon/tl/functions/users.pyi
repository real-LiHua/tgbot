from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeInputUser as TypeInputUser, TypeSecureValueError as TypeSecureValueError
from _typeshed import Incomplete
from datetime import datetime as datetime

class GetFullUserRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetIsPremiumRequiredToContactRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list['TypeInputUser']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetUsersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list['TypeInputUser']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetSecureValueErrorsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    errors: Incomplete
    def __init__(self, id: TypeInputUser, errors: list['TypeSecureValueError']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
