from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeChatBannedRights as TypeChatBannedRights, TypeChatReactions as TypeChatReactions, TypeDataJSON as TypeDataJSON, TypeDialogFilter as TypeDialogFilter, TypeInlineBotSwitchPM as TypeInlineBotSwitchPM, TypeInlineBotWebView as TypeInlineBotWebView, TypeInlineQueryPeerType as TypeInlineQueryPeerType, TypeInputBotApp as TypeInputBotApp, TypeInputBotInlineMessageID as TypeInputBotInlineMessageID, TypeInputBotInlineResult as TypeInputBotInlineResult, TypeInputChatPhoto as TypeInputChatPhoto, TypeInputCheckPasswordSRP as TypeInputCheckPasswordSRP, TypeInputDialogPeer as TypeInputDialogPeer, TypeInputDocument as TypeInputDocument, TypeInputEncryptedChat as TypeInputEncryptedChat, TypeInputEncryptedFile as TypeInputEncryptedFile, TypeInputFile as TypeInputFile, TypeInputGeoPoint as TypeInputGeoPoint, TypeInputMedia as TypeInputMedia, TypeInputMessage as TypeInputMessage, TypeInputPeer as TypeInputPeer, TypeInputQuickReplyShortcut as TypeInputQuickReplyShortcut, TypeInputReplyTo as TypeInputReplyTo, TypeInputSingleMedia as TypeInputSingleMedia, TypeInputStickerSet as TypeInputStickerSet, TypeInputStickeredMedia as TypeInputStickeredMedia, TypeInputUser as TypeInputUser, TypeInputWallPaper as TypeInputWallPaper, TypeMessageEntity as TypeMessageEntity, TypeMessagesFilter as TypeMessagesFilter, TypeReaction as TypeReaction, TypeReplyMarkup as TypeReplyMarkup, TypeSendMessageAction as TypeSendMessageAction, TypeShippingOption as TypeShippingOption, TypeStarsSubscriptionPricing as TypeStarsSubscriptionPricing, TypeTextWithEntities as TypeTextWithEntities, TypeWallPaperSettings as TypeWallPaperSettings
from _typeshed import Incomplete
from datetime import datetime

class AcceptEncryptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    g_b: Incomplete
    key_fingerprint: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, g_b: bytes, key_fingerprint: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AcceptUrlAuthRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    write_allowed: Incomplete
    peer: Incomplete
    msg_id: Incomplete
    button_id: Incomplete
    url: Incomplete
    def __init__(self, write_allowed: bool | None = None, peer: TypeInputPeer | None = None, msg_id: int | None = None, button_id: int | None = None, url: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AddChatUserRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    user_id: Incomplete
    fwd_limit: Incomplete
    def __init__(self, chat_id: int, user_id: TypeInputUser, fwd_limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckHistoryImportRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    import_head: Incomplete
    def __init__(self, import_head: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckHistoryImportPeerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckQuickReplyShortcutRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    shortcut: Incomplete
    def __init__(self, shortcut: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ClearAllDraftsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ClearRecentReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ClearRecentStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    attached: Incomplete
    def __init__(self, attached: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ClickSponsoredMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    media: Incomplete
    fullscreen: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputPeer, media: bool | None = None, fullscreen: bool | None = None, random_id: bytes = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateChatRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    users: Incomplete
    title: Incomplete
    ttl_period: Incomplete
    def __init__(self, users: list['TypeInputUser'], title: str, ttl_period: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteChatRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    def __init__(self, chat_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteChatUserRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    user_id: Incomplete
    revoke_history: Incomplete
    def __init__(self, chat_id: int, user_id: TypeInputUser, revoke_history: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteExportedChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    link: Incomplete
    def __init__(self, peer: TypeInputPeer, link: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteFactCheckRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    max_id: Incomplete
    just_clear: Incomplete
    revoke: Incomplete
    min_date: Incomplete
    max_date: Incomplete
    def __init__(self, peer: TypeInputPeer, max_id: int, just_clear: bool | None = None, revoke: bool | None = None, min_date: datetime | None = None, max_date: datetime | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    revoke: Incomplete
    def __init__(self, id: list[int], revoke: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeletePhoneCallHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    revoke: Incomplete
    def __init__(self, revoke: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteQuickReplyMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    shortcut_id: Incomplete
    id: Incomplete
    def __init__(self, shortcut_id: int, id: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteQuickReplyShortcutRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    shortcut_id: Incomplete
    def __init__(self, shortcut_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteRevokedExportedChatInvitesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    admin_id: Incomplete
    def __init__(self, peer: TypeInputPeer, admin_id: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteSavedHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    max_id: Incomplete
    min_date: Incomplete
    max_date: Incomplete
    def __init__(self, peer: TypeInputPeer, max_id: int, min_date: datetime | None = None, max_date: datetime | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteScheduledMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DiscardEncryptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    delete_history: Incomplete
    def __init__(self, chat_id: int, delete_history: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditChatAboutRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    about: Incomplete
    def __init__(self, peer: TypeInputPeer, about: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditChatAdminRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    user_id: Incomplete
    is_admin: Incomplete
    def __init__(self, chat_id: int, user_id: TypeInputUser, is_admin: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditChatDefaultBannedRightsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    banned_rights: Incomplete
    def __init__(self, peer: TypeInputPeer, banned_rights: TypeChatBannedRights) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditChatPhotoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    photo: Incomplete
    def __init__(self, chat_id: int, photo: TypeInputChatPhoto) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditChatTitleRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    title: Incomplete
    def __init__(self, chat_id: int, title: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditExportedChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    link: Incomplete
    revoked: Incomplete
    expire_date: Incomplete
    usage_limit: Incomplete
    request_needed: Incomplete
    title: Incomplete
    def __init__(self, peer: TypeInputPeer, link: str, revoked: bool | None = None, expire_date: datetime | None = None, usage_limit: int | None = None, request_needed: bool | None = None, title: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditFactCheckRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    text: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, text: TypeTextWithEntities) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditInlineBotMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    no_webpage: Incomplete
    invert_media: Incomplete
    message: Incomplete
    media: Incomplete
    reply_markup: Incomplete
    entities: Incomplete
    def __init__(self, id: TypeInputBotInlineMessageID, no_webpage: bool | None = None, invert_media: bool | None = None, message: str | None = None, media: TypeInputMedia | None = None, reply_markup: TypeReplyMarkup | None = None, entities: list['TypeMessageEntity'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    no_webpage: Incomplete
    invert_media: Incomplete
    message: Incomplete
    media: Incomplete
    reply_markup: Incomplete
    entities: Incomplete
    schedule_date: Incomplete
    quick_reply_shortcut_id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, no_webpage: bool | None = None, invert_media: bool | None = None, message: str | None = None, media: TypeInputMedia | None = None, reply_markup: TypeReplyMarkup | None = None, entities: list['TypeMessageEntity'] | None = None, schedule_date: datetime | None = None, quick_reply_shortcut_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditQuickReplyShortcutRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    shortcut_id: Incomplete
    shortcut: Incomplete
    def __init__(self, shortcut_id: int, shortcut: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    legacy_revoke_permanent: Incomplete
    request_needed: Incomplete
    expire_date: Incomplete
    usage_limit: Incomplete
    title: Incomplete
    subscription_pricing: Incomplete
    def __init__(self, peer: TypeInputPeer, legacy_revoke_permanent: bool | None = None, request_needed: bool | None = None, expire_date: datetime | None = None, usage_limit: int | None = None, title: str | None = None, subscription_pricing: TypeStarsSubscriptionPricing | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class FaveStickerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    unfave: Incomplete
    def __init__(self, id: TypeInputDocument, unfave: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ForwardMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    from_peer: Incomplete
    id: Incomplete
    to_peer: Incomplete
    silent: Incomplete
    background: Incomplete
    with_my_score: Incomplete
    drop_author: Incomplete
    drop_media_captions: Incomplete
    noforwards: Incomplete
    allow_paid_floodskip: Incomplete
    random_id: Incomplete
    top_msg_id: Incomplete
    schedule_date: Incomplete
    send_as: Incomplete
    quick_reply_shortcut: Incomplete
    def __init__(self, from_peer: TypeInputPeer, id: list[int], to_peer: TypeInputPeer, silent: bool | None = None, background: bool | None = None, with_my_score: bool | None = None, drop_author: bool | None = None, drop_media_captions: bool | None = None, noforwards: bool | None = None, allow_paid_floodskip: bool | None = None, random_id: list[int] = None, top_msg_id: int | None = None, schedule_date: datetime | None = None, send_as: TypeInputPeer | None = None, quick_reply_shortcut: TypeInputQuickReplyShortcut | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAdminsWithInvitesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAllDraftsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAllStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetArchivedStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset_id: Incomplete
    limit: Incomplete
    masks: Incomplete
    emojis: Incomplete
    def __init__(self, offset_id: int, limit: int, masks: bool | None = None, emojis: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAttachMenuBotRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    def __init__(self, bot: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAttachMenuBotsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAttachedStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    media: Incomplete
    def __init__(self, media: TypeInputStickeredMedia) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAvailableEffectsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAvailableReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBotAppRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    app: Incomplete
    hash: Incomplete
    def __init__(self, app: TypeInputBotApp, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBotCallbackAnswerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    game: Incomplete
    data: Incomplete
    password: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, game: bool | None = None, data: bytes | None = None, password: TypeInputCheckPasswordSRP | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChatInviteImportersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_date: Incomplete
    offset_user: Incomplete
    limit: Incomplete
    requested: Incomplete
    subscription_expired: Incomplete
    link: Incomplete
    q: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_date: datetime | None, offset_user: TypeInputUser, limit: int, requested: bool | None = None, subscription_expired: bool | None = None, link: str | None = None, q: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetCommonChatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    max_id: Incomplete
    limit: Incomplete
    def __init__(self, user_id: TypeInputUser, max_id: int, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetCustomEmojiDocumentsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    document_id: Incomplete
    def __init__(self, document_id: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDefaultHistoryTTLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDefaultTagReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDhConfigRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    version: Incomplete
    random_length: Incomplete
    def __init__(self, version: int, random_length: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDialogFiltersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDialogUnreadMarksRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset_date: Incomplete
    offset_id: Incomplete
    offset_peer: Incomplete
    limit: Incomplete
    hash: Incomplete
    exclude_pinned: Incomplete
    folder_id: Incomplete
    def __init__(self, offset_date: datetime | None, offset_id: int, offset_peer: TypeInputPeer, limit: int, hash: int, exclude_pinned: bool | None = None, folder_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDiscussionMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDocumentByHashRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    sha256: Incomplete
    size: Incomplete
    mime_type: Incomplete
    def __init__(self, sha256: bytes, size: int, mime_type: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiGroupsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiKeywordsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    lang_code: Incomplete
    def __init__(self, lang_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiKeywordsDifferenceRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    lang_code: Incomplete
    from_version: Incomplete
    def __init__(self, lang_code: str, from_version: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiKeywordsLanguagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    lang_codes: Incomplete
    def __init__(self, lang_codes: list[str]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiProfilePhotoGroupsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiStatusGroupsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiStickerGroupsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetEmojiURLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    lang_code: Incomplete
    def __init__(self, lang_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetExportedChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    link: Incomplete
    def __init__(self, peer: TypeInputPeer, link: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetExportedChatInvitesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    admin_id: Incomplete
    limit: Incomplete
    revoked: Incomplete
    offset_date: Incomplete
    offset_link: Incomplete
    def __init__(self, peer: TypeInputPeer, admin_id: TypeInputUser, limit: int, revoked: bool | None = None, offset_date: datetime | None = None, offset_link: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetExtendedMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetFactCheckRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetFavedStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetFeaturedEmojiStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetFeaturedStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetFullChatRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    def __init__(self, chat_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGameHighScoresRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    user_id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, user_id: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_id: Incomplete
    offset_date: Incomplete
    add_offset: Incomplete
    limit: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    hash: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_id: int, offset_date: datetime | None, add_offset: int, limit: int, max_id: int, min_id: int, hash: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetInlineBotResultsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    peer: Incomplete
    query: Incomplete
    offset: Incomplete
    geo_point: Incomplete
    def __init__(self, bot: TypeInputUser, peer: TypeInputPeer, query: str, offset: str, geo_point: TypeInputGeoPoint | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetInlineGameHighScoresRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    user_id: Incomplete
    def __init__(self, id: TypeInputBotInlineMessageID, user_id: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMaskStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessageEditDataRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessageReactionsListRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    limit: Incomplete
    reaction: Incomplete
    offset: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, limit: int, reaction: TypeReaction | None = None, offset: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessageReadParticipantsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list['TypeInputMessage']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessagesReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessagesViewsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    increment: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int], increment: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMyStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset_id: Incomplete
    limit: Incomplete
    def __init__(self, offset_id: int, limit: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetOldFeaturedStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset: Incomplete
    limit: Incomplete
    hash: Incomplete
    def __init__(self, offset: int, limit: int, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetOnlinesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetOutboxReadDateRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPaidReactionPrivacyRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPeerDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peers: Incomplete
    def __init__(self, peers: list['TypeInputDialogPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPeerSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPinnedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    folder_id: Incomplete
    def __init__(self, folder_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPinnedSavedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPollResultsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPollVotesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    limit: Incomplete
    option: Incomplete
    offset: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, limit: int, option: bytes | None = None, offset: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPreparedInlineMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    id: Incomplete
    def __init__(self, bot: TypeInputUser, id: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetQuickRepliesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetQuickReplyMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    shortcut_id: Incomplete
    hash: Incomplete
    id: Incomplete
    def __init__(self, shortcut_id: int, hash: int, id: list[int] | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetRecentLocationsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    limit: Incomplete
    hash: Incomplete
    def __init__(self, peer: TypeInputPeer, limit: int, hash: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetRecentReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    limit: Incomplete
    hash: Incomplete
    def __init__(self, limit: int, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetRecentStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    attached: Incomplete
    def __init__(self, hash: int, attached: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetRepliesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    offset_id: Incomplete
    offset_date: Incomplete
    add_offset: Incomplete
    limit: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    hash: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, offset_id: int, offset_date: datetime | None, add_offset: int, limit: int, max_id: int, min_id: int, hash: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset_date: Incomplete
    offset_id: Incomplete
    offset_peer: Incomplete
    limit: Incomplete
    hash: Incomplete
    exclude_pinned: Incomplete
    def __init__(self, offset_date: datetime | None, offset_id: int, offset_peer: TypeInputPeer, limit: int, hash: int, exclude_pinned: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedGifsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_id: Incomplete
    offset_date: Incomplete
    add_offset: Incomplete
    limit: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    hash: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_id: int, offset_date: datetime | None, add_offset: int, limit: int, max_id: int, min_id: int, hash: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedReactionTagsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    peer: Incomplete
    def __init__(self, hash: int, peer: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetScheduledHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    hash: Incomplete
    def __init__(self, peer: TypeInputPeer, hash: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetScheduledMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSearchCountersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    filters: Incomplete
    saved_peer_id: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, filters: list['TypeMessagesFilter'], saved_peer_id: TypeInputPeer | None = None, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSearchResultsCalendarRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    filter: Incomplete
    offset_id: Incomplete
    offset_date: Incomplete
    saved_peer_id: Incomplete
    def __init__(self, peer: TypeInputPeer, filter: TypeMessagesFilter, offset_id: int, offset_date: datetime | None, saved_peer_id: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSearchResultsPositionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    filter: Incomplete
    offset_id: Incomplete
    limit: Incomplete
    saved_peer_id: Incomplete
    def __init__(self, peer: TypeInputPeer, filter: TypeMessagesFilter, offset_id: int, limit: int, saved_peer_id: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSplitRangesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSponsoredMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    hash: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    emoticon: Incomplete
    hash: Incomplete
    def __init__(self, emoticon: str, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSuggestedDialogFiltersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetTopReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    limit: Incomplete
    hash: Incomplete
    def __init__(self, limit: int, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetUnreadMentionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_id: Incomplete
    add_offset: Incomplete
    limit: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_id: int, add_offset: int, limit: int, max_id: int, min_id: int, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetUnreadReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset_id: Incomplete
    add_offset: Incomplete
    limit: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, offset_id: int, add_offset: int, limit: int, max_id: int, min_id: int, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetWebPageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    url: Incomplete
    hash: Incomplete
    def __init__(self, url: str, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetWebPagePreviewRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    message: Incomplete
    entities: Incomplete
    def __init__(self, message: str, entities: list['TypeMessageEntity'] | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class HideAllChatJoinRequestsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    approved: Incomplete
    link: Incomplete
    def __init__(self, peer: TypeInputPeer, approved: bool | None = None, link: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class HideChatJoinRequestRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    user_id: Incomplete
    approved: Incomplete
    def __init__(self, peer: TypeInputPeer, user_id: TypeInputUser, approved: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class HidePeerSettingsBarRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ImportChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InitHistoryImportRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    file: Incomplete
    media_count: Incomplete
    def __init__(self, peer: TypeInputPeer, file: TypeInputFile, media_count: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InstallStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    archived: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet, archived: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class MarkDialogUnreadRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    unread: Incomplete
    def __init__(self, peer: TypeInputDialogPeer, unread: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class MigrateChatRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    chat_id: Incomplete
    def __init__(self, chat_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ProlongWebViewRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    bot: Incomplete
    query_id: Incomplete
    silent: Incomplete
    reply_to: Incomplete
    send_as: Incomplete
    def __init__(self, peer: TypeInputPeer, bot: TypeInputUser, query_id: int, silent: bool | None = None, reply_to: TypeInputReplyTo | None = None, send_as: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RateTranscribedAudioRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    transcription_id: Incomplete
    good: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, transcription_id: int, good: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadDiscussionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    read_max_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, read_max_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadEncryptedHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    max_date: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, max_date: datetime | None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadFeaturedStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    max_id: Incomplete
    def __init__(self, peer: TypeInputPeer, max_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadMentionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadMessageContentsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReceivedMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    max_id: Incomplete
    def __init__(self, max_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReceivedQueueRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    max_qts: Incomplete
    def __init__(self, max_qts: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class ReorderPinnedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    folder_id: Incomplete
    order: Incomplete
    force: Incomplete
    def __init__(self, folder_id: int, order: list['TypeInputDialogPeer'], force: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderPinnedSavedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    order: Incomplete
    force: Incomplete
    def __init__(self, order: list['TypeInputDialogPeer'], force: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderQuickRepliesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    order: Incomplete
    def __init__(self, order: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    order: Incomplete
    masks: Incomplete
    emojis: Incomplete
    def __init__(self, order: list[int], masks: bool | None = None, emojis: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    option: Incomplete
    message: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int], option: bytes, message: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportEncryptedSpamRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportReactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    reaction_peer: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, reaction_peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportSpamRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportSponsoredMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    option: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputPeer, option: bytes, random_id: bytes = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestAppWebViewRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    app: Incomplete
    platform: Incomplete
    write_allowed: Incomplete
    compact: Incomplete
    fullscreen: Incomplete
    start_param: Incomplete
    theme_params: Incomplete
    def __init__(self, peer: TypeInputPeer, app: TypeInputBotApp, platform: str, write_allowed: bool | None = None, compact: bool | None = None, fullscreen: bool | None = None, start_param: str | None = None, theme_params: TypeDataJSON | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestEncryptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    g_a: Incomplete
    random_id: Incomplete
    def __init__(self, user_id: TypeInputUser, g_a: bytes, random_id: int = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestMainWebViewRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    bot: Incomplete
    platform: Incomplete
    compact: Incomplete
    fullscreen: Incomplete
    start_param: Incomplete
    theme_params: Incomplete
    def __init__(self, peer: TypeInputPeer, bot: TypeInputUser, platform: str, compact: bool | None = None, fullscreen: bool | None = None, start_param: str | None = None, theme_params: TypeDataJSON | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestSimpleWebViewRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    platform: Incomplete
    from_switch_webview: Incomplete
    from_side_menu: Incomplete
    compact: Incomplete
    fullscreen: Incomplete
    url: Incomplete
    start_param: Incomplete
    theme_params: Incomplete
    def __init__(self, bot: TypeInputUser, platform: str, from_switch_webview: bool | None = None, from_side_menu: bool | None = None, compact: bool | None = None, fullscreen: bool | None = None, url: str | None = None, start_param: str | None = None, theme_params: TypeDataJSON | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestUrlAuthRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    button_id: Incomplete
    url: Incomplete
    def __init__(self, peer: TypeInputPeer | None = None, msg_id: int | None = None, button_id: int | None = None, url: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestWebViewRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    bot: Incomplete
    platform: Incomplete
    from_bot_menu: Incomplete
    silent: Incomplete
    compact: Incomplete
    fullscreen: Incomplete
    url: Incomplete
    start_param: Incomplete
    theme_params: Incomplete
    reply_to: Incomplete
    send_as: Incomplete
    def __init__(self, peer: TypeInputPeer, bot: TypeInputUser, platform: str, from_bot_menu: bool | None = None, silent: bool | None = None, compact: bool | None = None, fullscreen: bool | None = None, url: str | None = None, start_param: str | None = None, theme_params: TypeDataJSON | None = None, reply_to: TypeInputReplyTo | None = None, send_as: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveDefaultSendAsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    send_as: Incomplete
    def __init__(self, peer: TypeInputPeer, send_as: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveDraftRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    message: Incomplete
    no_webpage: Incomplete
    invert_media: Incomplete
    reply_to: Incomplete
    entities: Incomplete
    media: Incomplete
    effect: Incomplete
    def __init__(self, peer: TypeInputPeer, message: str, no_webpage: bool | None = None, invert_media: bool | None = None, reply_to: TypeInputReplyTo | None = None, entities: list['TypeMessageEntity'] | None = None, media: TypeInputMedia | None = None, effect: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveGifRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    unsave: Incomplete
    def __init__(self, id: TypeInputDocument, unsave: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SavePreparedInlineMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    result: Incomplete
    user_id: Incomplete
    peer_types: Incomplete
    def __init__(self, result: TypeInputBotInlineResult, user_id: TypeInputUser, peer_types: list['TypeInlineQueryPeerType'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveRecentStickerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    unsave: Incomplete
    attached: Incomplete
    def __init__(self, id: TypeInputDocument, unsave: bool, attached: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    q: Incomplete
    filter: Incomplete
    min_date: Incomplete
    max_date: Incomplete
    offset_id: Incomplete
    add_offset: Incomplete
    limit: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    hash: Incomplete
    from_id: Incomplete
    saved_peer_id: Incomplete
    saved_reaction: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, q: str, filter: TypeMessagesFilter, min_date: datetime | None, max_date: datetime | None, offset_id: int, add_offset: int, limit: int, max_id: int, min_id: int, hash: int, from_id: TypeInputPeer | None = None, saved_peer_id: TypeInputPeer | None = None, saved_reaction: list['TypeReaction'] | None = None, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchCustomEmojiRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    emoticon: Incomplete
    hash: Incomplete
    def __init__(self, emoticon: str, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchEmojiStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    q: Incomplete
    hash: Incomplete
    exclude_featured: Incomplete
    def __init__(self, q: str, hash: int, exclude_featured: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchGlobalRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    q: Incomplete
    filter: Incomplete
    min_date: Incomplete
    max_date: Incomplete
    offset_rate: Incomplete
    offset_peer: Incomplete
    offset_id: Incomplete
    limit: Incomplete
    broadcasts_only: Incomplete
    folder_id: Incomplete
    def __init__(self, q: str, filter: TypeMessagesFilter, min_date: datetime | None, max_date: datetime | None, offset_rate: int, offset_peer: TypeInputPeer, offset_id: int, limit: int, broadcasts_only: bool | None = None, folder_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchSentMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    q: Incomplete
    filter: Incomplete
    limit: Incomplete
    def __init__(self, q: str, filter: TypeMessagesFilter, limit: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    q: Incomplete
    hash: Incomplete
    exclude_featured: Incomplete
    def __init__(self, q: str, hash: int, exclude_featured: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendBotRequestedPeerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    button_id: Incomplete
    requested_peers: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, button_id: int, requested_peers: list['TypeInputPeer']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendEncryptedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    data: Incomplete
    silent: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, data: bytes, silent: bool | None = None, random_id: int = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendEncryptedFileRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    data: Incomplete
    file: Incomplete
    silent: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, data: bytes, file: TypeInputEncryptedFile, silent: bool | None = None, random_id: int = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendEncryptedServiceRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    data: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, data: bytes, random_id: int = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendInlineBotResultRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    query_id: Incomplete
    id: Incomplete
    silent: Incomplete
    background: Incomplete
    clear_draft: Incomplete
    hide_via: Incomplete
    reply_to: Incomplete
    random_id: Incomplete
    schedule_date: Incomplete
    send_as: Incomplete
    quick_reply_shortcut: Incomplete
    def __init__(self, peer: TypeInputPeer, query_id: int, id: str, silent: bool | None = None, background: bool | None = None, clear_draft: bool | None = None, hide_via: bool | None = None, reply_to: TypeInputReplyTo | None = None, random_id: int = None, schedule_date: datetime | None = None, send_as: TypeInputPeer | None = None, quick_reply_shortcut: TypeInputQuickReplyShortcut | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    media: Incomplete
    message: Incomplete
    silent: Incomplete
    background: Incomplete
    clear_draft: Incomplete
    noforwards: Incomplete
    update_stickersets_order: Incomplete
    invert_media: Incomplete
    allow_paid_floodskip: Incomplete
    reply_to: Incomplete
    random_id: Incomplete
    reply_markup: Incomplete
    entities: Incomplete
    schedule_date: Incomplete
    send_as: Incomplete
    quick_reply_shortcut: Incomplete
    effect: Incomplete
    def __init__(self, peer: TypeInputPeer, media: TypeInputMedia, message: str, silent: bool | None = None, background: bool | None = None, clear_draft: bool | None = None, noforwards: bool | None = None, update_stickersets_order: bool | None = None, invert_media: bool | None = None, allow_paid_floodskip: bool | None = None, reply_to: TypeInputReplyTo | None = None, random_id: int = None, reply_markup: TypeReplyMarkup | None = None, entities: list['TypeMessageEntity'] | None = None, schedule_date: datetime | None = None, send_as: TypeInputPeer | None = None, quick_reply_shortcut: TypeInputQuickReplyShortcut | None = None, effect: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    message: Incomplete
    no_webpage: Incomplete
    silent: Incomplete
    background: Incomplete
    clear_draft: Incomplete
    noforwards: Incomplete
    update_stickersets_order: Incomplete
    invert_media: Incomplete
    allow_paid_floodskip: Incomplete
    reply_to: Incomplete
    random_id: Incomplete
    reply_markup: Incomplete
    entities: Incomplete
    schedule_date: Incomplete
    send_as: Incomplete
    quick_reply_shortcut: Incomplete
    effect: Incomplete
    def __init__(self, peer: TypeInputPeer, message: str, no_webpage: bool | None = None, silent: bool | None = None, background: bool | None = None, clear_draft: bool | None = None, noforwards: bool | None = None, update_stickersets_order: bool | None = None, invert_media: bool | None = None, allow_paid_floodskip: bool | None = None, reply_to: TypeInputReplyTo | None = None, random_id: int = None, reply_markup: TypeReplyMarkup | None = None, entities: list['TypeMessageEntity'] | None = None, schedule_date: datetime | None = None, send_as: TypeInputPeer | None = None, quick_reply_shortcut: TypeInputQuickReplyShortcut | None = None, effect: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendMultiMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    multi_media: Incomplete
    silent: Incomplete
    background: Incomplete
    clear_draft: Incomplete
    noforwards: Incomplete
    update_stickersets_order: Incomplete
    invert_media: Incomplete
    allow_paid_floodskip: Incomplete
    reply_to: Incomplete
    schedule_date: Incomplete
    send_as: Incomplete
    quick_reply_shortcut: Incomplete
    effect: Incomplete
    def __init__(self, peer: TypeInputPeer, multi_media: list['TypeInputSingleMedia'], silent: bool | None = None, background: bool | None = None, clear_draft: bool | None = None, noforwards: bool | None = None, update_stickersets_order: bool | None = None, invert_media: bool | None = None, allow_paid_floodskip: bool | None = None, reply_to: TypeInputReplyTo | None = None, schedule_date: datetime | None = None, send_as: TypeInputPeer | None = None, quick_reply_shortcut: TypeInputQuickReplyShortcut | None = None, effect: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendPaidReactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    count: Incomplete
    random_id: Incomplete
    private: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, count: int, random_id: int = None, private: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendQuickReplyMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    shortcut_id: Incomplete
    id: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputPeer, shortcut_id: int, id: list[int], random_id: list[int] = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendReactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    big: Incomplete
    add_to_recent: Incomplete
    reaction: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, big: bool | None = None, add_to_recent: bool | None = None, reaction: list['TypeReaction'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendScheduledMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendScreenshotNotificationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    reply_to: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputPeer, reply_to: TypeInputReplyTo, random_id: int = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendVoteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    options: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, options: list[bytes]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendWebViewDataRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    button_text: Incomplete
    data: Incomplete
    random_id: Incomplete
    def __init__(self, bot: TypeInputUser, button_text: str, data: str, random_id: int = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendWebViewResultMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot_query_id: Incomplete
    result: Incomplete
    def __init__(self, bot_query_id: str, result: TypeInputBotInlineResult) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotCallbackAnswerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    query_id: Incomplete
    cache_time: Incomplete
    alert: Incomplete
    message: Incomplete
    url: Incomplete
    def __init__(self, query_id: int, cache_time: int, alert: bool | None = None, message: str | None = None, url: str | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotPrecheckoutResultsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    query_id: Incomplete
    success: Incomplete
    error: Incomplete
    def __init__(self, query_id: int, success: bool | None = None, error: str | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotShippingResultsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    query_id: Incomplete
    error: Incomplete
    shipping_options: Incomplete
    def __init__(self, query_id: int, error: str | None = None, shipping_options: list['TypeShippingOption'] | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetChatAvailableReactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    available_reactions: Incomplete
    reactions_limit: Incomplete
    paid_enabled: Incomplete
    def __init__(self, peer: TypeInputPeer, available_reactions: TypeChatReactions, reactions_limit: int | None = None, paid_enabled: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetChatThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    emoticon: Incomplete
    def __init__(self, peer: TypeInputPeer, emoticon: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetChatWallPaperRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    for_both: Incomplete
    revert: Incomplete
    wallpaper: Incomplete
    settings: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, for_both: bool | None = None, revert: bool | None = None, wallpaper: TypeInputWallPaper | None = None, settings: TypeWallPaperSettings | None = None, id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetDefaultHistoryTTLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    period: Incomplete
    def __init__(self, period: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetDefaultReactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    reaction: Incomplete
    def __init__(self, reaction: TypeReaction) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetEncryptedTypingRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    typing: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, typing: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetGameScoreRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    user_id: Incomplete
    score: Incomplete
    edit_message: Incomplete
    force: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, user_id: TypeInputUser, score: int, edit_message: bool | None = None, force: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetHistoryTTLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    period: Incomplete
    def __init__(self, peer: TypeInputPeer, period: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetInlineBotResultsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    query_id: Incomplete
    results: Incomplete
    cache_time: Incomplete
    gallery: Incomplete
    private: Incomplete
    next_offset: Incomplete
    switch_pm: Incomplete
    switch_webview: Incomplete
    def __init__(self, query_id: int, results: list['TypeInputBotInlineResult'], cache_time: int, gallery: bool | None = None, private: bool | None = None, next_offset: str | None = None, switch_pm: TypeInlineBotSwitchPM | None = None, switch_webview: TypeInlineBotWebView | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetInlineGameScoreRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    user_id: Incomplete
    score: Incomplete
    edit_message: Incomplete
    force: Incomplete
    def __init__(self, id: TypeInputBotInlineMessageID, user_id: TypeInputUser, score: int, edit_message: bool | None = None, force: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetTypingRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    action: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, action: TypeSendMessageAction, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class StartBotRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    peer: Incomplete
    start_param: Incomplete
    random_id: Incomplete
    def __init__(self, bot: TypeInputUser, peer: TypeInputPeer, start_param: str, random_id: int = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class StartHistoryImportRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    import_id: Incomplete
    def __init__(self, peer: TypeInputPeer, import_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleBotInAttachMenuRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    enabled: Incomplete
    write_allowed: Incomplete
    def __init__(self, bot: TypeInputUser, enabled: bool, write_allowed: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleDialogFilterTagsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    enabled: Incomplete
    def __init__(self, enabled: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleDialogPinRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    pinned: Incomplete
    def __init__(self, peer: TypeInputDialogPeer, pinned: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleNoForwardsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    enabled: Incomplete
    def __init__(self, peer: TypeInputPeer, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TogglePaidReactionPrivacyRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    private: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int, private: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TogglePeerTranslationsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    disabled: Incomplete
    def __init__(self, peer: TypeInputPeer, disabled: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleSavedDialogPinRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    pinned: Incomplete
    def __init__(self, peer: TypeInputDialogPeer, pinned: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickersets: Incomplete
    uninstall: Incomplete
    archive: Incomplete
    unarchive: Incomplete
    def __init__(self, stickersets: list['TypeInputStickerSet'], uninstall: bool | None = None, archive: bool | None = None, unarchive: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TranscribeAudioRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TranslateTextRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    to_lang: Incomplete
    peer: Incomplete
    id: Incomplete
    text: Incomplete
    def __init__(self, to_lang: str, peer: TypeInputPeer | None = None, id: list[int] | None = None, text: list['TypeTextWithEntities'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UninstallStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UnpinAllMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    top_msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, top_msg_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateDialogFilterRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    filter: Incomplete
    def __init__(self, id: int, filter: TypeDialogFilter | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateDialogFiltersOrderRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    order: Incomplete
    def __init__(self, order: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdatePinnedMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    silent: Incomplete
    unpin: Incomplete
    pm_oneside: Incomplete
    def __init__(self, peer: TypeInputPeer, id: int, silent: bool | None = None, unpin: bool | None = None, pm_oneside: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateSavedReactionTagRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    reaction: Incomplete
    title: Incomplete
    def __init__(self, reaction: TypeReaction, title: str | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UploadEncryptedFileRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    file: Incomplete
    def __init__(self, peer: TypeInputEncryptedChat, file: TypeInputEncryptedFile) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UploadImportedMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    import_id: Incomplete
    file_name: Incomplete
    media: Incomplete
    def __init__(self, peer: TypeInputPeer, import_id: int, file_name: str, media: TypeInputMedia) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UploadMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    media: Incomplete
    business_connection_id: Incomplete
    def __init__(self, peer: TypeInputPeer, media: TypeInputMedia, business_connection_id: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ViewSponsoredMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    random_id: Incomplete
    def __init__(self, peer: TypeInputPeer, random_id: bytes = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
