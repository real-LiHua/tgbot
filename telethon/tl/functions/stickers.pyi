from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeInputDocument as TypeInputDocument, TypeInputStickerSet as TypeInputStickerSet, TypeInputStickerSetItem as TypeInputStickerSetItem, TypeInputUser as TypeInputUser, TypeMaskCoords as TypeMaskCoords
from _typeshed import Incomplete
from datetime import datetime as datetime

class AddStickerToSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    sticker: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet, sticker: TypeInputStickerSetItem) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ChangeStickerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    sticker: Incomplete
    emoji: Incomplete
    mask_coords: Incomplete
    keywords: Incomplete
    def __init__(self, sticker: TypeInputDocument, emoji: str | None = None, mask_coords: TypeMaskCoords | None = None, keywords: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ChangeStickerPositionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    sticker: Incomplete
    position: Incomplete
    def __init__(self, sticker: TypeInputDocument, position: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckShortNameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    short_name: Incomplete
    def __init__(self, short_name: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    title: Incomplete
    short_name: Incomplete
    stickers: Incomplete
    masks: Incomplete
    emojis: Incomplete
    text_color: Incomplete
    thumb: Incomplete
    software: Incomplete
    def __init__(self, user_id: TypeInputUser, title: str, short_name: str, stickers: list['TypeInputStickerSetItem'], masks: bool | None = None, emojis: bool | None = None, text_color: bool | None = None, thumb: TypeInputDocument | None = None, software: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RemoveStickerFromSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    sticker: Incomplete
    def __init__(self, sticker: TypeInputDocument) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RenameStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    title: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet, title: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReplaceStickerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    sticker: Incomplete
    new_sticker: Incomplete
    def __init__(self, sticker: TypeInputDocument, new_sticker: TypeInputStickerSetItem) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetStickerSetThumbRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    stickerset: Incomplete
    thumb: Incomplete
    thumb_document_id: Incomplete
    def __init__(self, stickerset: TypeInputStickerSet, thumb: TypeInputDocument | None = None, thumb_document_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SuggestShortNameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    title: Incomplete
    def __init__(self, title: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
