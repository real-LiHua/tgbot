from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeChannelAdminLogEventsFilter as TypeChannelAdminLogEventsFilter, TypeChannelParticipantsFilter as TypeChannelParticipantsFilter, TypeChatAdminRights as TypeChatAdminRights, TypeChatBannedRights as TypeChatBannedRights, TypeEmojiStatus as TypeEmojiStatus, TypeInputChannel as TypeInputChannel, TypeInputChatPhoto as TypeInputChatPhoto, TypeInputCheckPasswordSRP as TypeInputCheckPasswordSRP, TypeInputGeoPoint as TypeInputGeoPoint, TypeInputMessage as TypeInputMessage, TypeInputPeer as TypeInputPeer, TypeInputStickerSet as TypeInputStickerSet, TypeInputUser as TypeInputUser
from _typeshed import Incomplete
from datetime import datetime

class CheckUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    username: Incomplete
    def __init__(self, channel: TypeInputChannel, username: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ConvertToGigagroupRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    title: Incomplete
    about: Incomplete
    broadcast: Incomplete
    megagroup: Incomplete
    for_import: Incomplete
    forum: Incomplete
    geo_point: Incomplete
    address: Incomplete
    ttl_period: Incomplete
    def __init__(self, title: str, about: str, broadcast: bool | None = None, megagroup: bool | None = None, for_import: bool | None = None, forum: bool | None = None, geo_point: TypeInputGeoPoint | None = None, address: str | None = None, ttl_period: int | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateForumTopicRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    title: Incomplete
    icon_color: Incomplete
    icon_emoji_id: Incomplete
    random_id: Incomplete
    send_as: Incomplete
    def __init__(self, channel: TypeInputChannel, title: str, icon_color: int | None = None, icon_emoji_id: int | None = None, random_id: int = None, send_as: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeactivateAllUsernamesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    max_id: Incomplete
    for_everyone: Incomplete
    def __init__(self, channel: TypeInputChannel, max_id: int, for_everyone: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    id: Incomplete
    def __init__(self, channel: TypeInputChannel, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteParticipantHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    participant: Incomplete
    def __init__(self, channel: TypeInputChannel, participant: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteTopicHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    top_msg_id: Incomplete
    def __init__(self, channel: TypeInputChannel, top_msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditAdminRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    user_id: Incomplete
    admin_rights: Incomplete
    rank: Incomplete
    def __init__(self, channel: TypeInputChannel, user_id: TypeInputUser, admin_rights: TypeChatAdminRights, rank: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditBannedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    participant: Incomplete
    banned_rights: Incomplete
    def __init__(self, channel: TypeInputChannel, participant: TypeInputPeer, banned_rights: TypeChatBannedRights) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditCreatorRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    user_id: Incomplete
    password: Incomplete
    def __init__(self, channel: TypeInputChannel, user_id: TypeInputUser, password: TypeInputCheckPasswordSRP) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditForumTopicRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    topic_id: Incomplete
    title: Incomplete
    icon_emoji_id: Incomplete
    closed: Incomplete
    hidden: Incomplete
    def __init__(self, channel: TypeInputChannel, topic_id: int, title: str | None = None, icon_emoji_id: int | None = None, closed: bool | None = None, hidden: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditLocationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    geo_point: Incomplete
    address: Incomplete
    def __init__(self, channel: TypeInputChannel, geo_point: TypeInputGeoPoint, address: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditPhotoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    photo: Incomplete
    def __init__(self, channel: TypeInputChannel, photo: TypeInputChatPhoto) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditTitleRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    title: Incomplete
    def __init__(self, channel: TypeInputChannel, title: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportMessageLinkRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    id: Incomplete
    grouped: Incomplete
    thread: Incomplete
    def __init__(self, channel: TypeInputChannel, id: int, grouped: bool | None = None, thread: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAdminLogRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    q: Incomplete
    max_id: Incomplete
    min_id: Incomplete
    limit: Incomplete
    events_filter: Incomplete
    admins: Incomplete
    def __init__(self, channel: TypeInputChannel, q: str, max_id: int, min_id: int, limit: int, events_filter: TypeChannelAdminLogEventsFilter | None = None, admins: list['TypeInputUser'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAdminedPublicChannelsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    by_location: Incomplete
    check_limit: Incomplete
    for_personal: Incomplete
    def __init__(self, by_location: bool | None = None, check_limit: bool | None = None, for_personal: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChannelRecommendationsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChannelsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list['TypeInputChannel']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetForumTopicsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    offset_date: Incomplete
    offset_id: Incomplete
    offset_topic: Incomplete
    limit: Incomplete
    q: Incomplete
    def __init__(self, channel: TypeInputChannel, offset_date: datetime | None, offset_id: int, offset_topic: int, limit: int, q: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetForumTopicsByIDRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    topics: Incomplete
    def __init__(self, channel: TypeInputChannel, topics: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetFullChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGroupsForDiscussionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetInactiveChannelsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetLeftChannelsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset: Incomplete
    def __init__(self, offset: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    id: Incomplete
    def __init__(self, channel: TypeInputChannel, id: list['TypeInputMessage']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetParticipantRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    participant: Incomplete
    def __init__(self, channel: TypeInputChannel, participant: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetParticipantsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    filter: Incomplete
    offset: Incomplete
    limit: Incomplete
    hash: Incomplete
    def __init__(self, channel: TypeInputChannel, filter: TypeChannelParticipantsFilter, offset: int, limit: int, hash: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSendAsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InviteToChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    users: Incomplete
    def __init__(self, channel: TypeInputChannel, users: list['TypeInputUser']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class JoinChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class LeaveChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadHistoryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    max_id: Incomplete
    def __init__(self, channel: TypeInputChannel, max_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReadMessageContentsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    id: Incomplete
    def __init__(self, channel: TypeInputChannel, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderPinnedForumTopicsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    order: Incomplete
    force: Incomplete
    def __init__(self, channel: TypeInputChannel, order: list[int], force: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderUsernamesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    order: Incomplete
    def __init__(self, channel: TypeInputChannel, order: list[str]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportAntiSpamFalsePositiveRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    msg_id: Incomplete
    def __init__(self, channel: TypeInputChannel, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportSpamRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    participant: Incomplete
    id: Incomplete
    def __init__(self, channel: TypeInputChannel, participant: TypeInputPeer, id: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RestrictSponsoredMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    restricted: Incomplete
    def __init__(self, channel: TypeInputChannel, restricted: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchPostsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hashtag: Incomplete
    offset_rate: Incomplete
    offset_peer: Incomplete
    offset_id: Incomplete
    limit: Incomplete
    def __init__(self, hashtag: str, offset_rate: int, offset_peer: TypeInputPeer, offset_id: int, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBoostsToUnblockRestrictionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    boosts: Incomplete
    def __init__(self, channel: TypeInputChannel, boosts: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetDiscussionGroupRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    broadcast: Incomplete
    group: Incomplete
    def __init__(self, broadcast: TypeInputChannel, group: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetEmojiStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    stickerset: Incomplete
    def __init__(self, channel: TypeInputChannel, stickerset: TypeInputStickerSet) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetStickersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    stickerset: Incomplete
    def __init__(self, channel: TypeInputChannel, stickerset: TypeInputStickerSet) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleAntiSpamRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleForumRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleJoinRequestRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleJoinToSendRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleParticipantsHiddenRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class TogglePreHistoryHiddenRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleSignaturesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    signatures_enabled: Incomplete
    profiles_enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, signatures_enabled: bool | None = None, profiles_enabled: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleSlowModeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    seconds: Incomplete
    def __init__(self, channel: TypeInputChannel, seconds: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    username: Incomplete
    active: Incomplete
    def __init__(self, channel: TypeInputChannel, username: str, active: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleViewForumAsMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    enabled: Incomplete
    def __init__(self, channel: TypeInputChannel, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateColorRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    for_profile: Incomplete
    color: Incomplete
    background_emoji_id: Incomplete
    def __init__(self, channel: TypeInputChannel, for_profile: bool | None = None, color: int | None = None, background_emoji_id: int | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateEmojiStatusRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    emoji_status: Incomplete
    def __init__(self, channel: TypeInputChannel, emoji_status: TypeEmojiStatus) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdatePinnedForumTopicRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    topic_id: Incomplete
    pinned: Incomplete
    def __init__(self, channel: TypeInputChannel, topic_id: int, pinned: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    username: Incomplete
    def __init__(self, channel: TypeInputChannel, username: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
