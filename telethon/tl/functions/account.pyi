from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeAccountDaysTTL as TypeAccountDaysTTL, TypeAutoDownloadSettings as TypeAutoDownloadSettings, TypeAutoSaveSettings as TypeAutoSaveSettings, TypeBaseTheme as TypeBaseTheme, TypeBirthday as TypeBirthday, TypeBusinessWorkHours as TypeBusinessWorkHours, TypeCodeSettings as TypeCodeSettings, TypeEmailVerification as TypeEmailVerification, TypeEmailVerifyPurpose as TypeEmailVerifyPurpose, TypeEmojiStatus as TypeEmojiStatus, TypeGlobalPrivacySettings as TypeGlobalPrivacySettings, TypeInputBusinessAwayMessage as TypeInputBusinessAwayMessage, TypeInputBusinessBotRecipients as TypeInputBusinessBotRecipients, TypeInputBusinessChatLink as TypeInputBusinessChatLink, TypeInputBusinessGreetingMessage as TypeInputBusinessGreetingMessage, TypeInputBusinessIntro as TypeInputBusinessIntro, TypeInputChannel as TypeInputChannel, TypeInputCheckPasswordSRP as TypeInputCheckPasswordSRP, TypeInputDocument as TypeInputDocument, TypeInputFile as TypeInputFile, TypeInputGeoPoint as TypeInputGeoPoint, TypeInputNotifyPeer as TypeInputNotifyPeer, TypeInputPeer as TypeInputPeer, TypeInputPeerNotifySettings as TypeInputPeerNotifySettings, TypeInputPhoto as TypeInputPhoto, TypeInputPrivacyKey as TypeInputPrivacyKey, TypeInputPrivacyRule as TypeInputPrivacyRule, TypeInputSecureValue as TypeInputSecureValue, TypeInputTheme as TypeInputTheme, TypeInputThemeSettings as TypeInputThemeSettings, TypeInputUser as TypeInputUser, TypeInputWallPaper as TypeInputWallPaper, TypeReactionsNotifySettings as TypeReactionsNotifySettings, TypeReportReason as TypeReportReason, TypeSecureCredentialsEncrypted as TypeSecureCredentialsEncrypted, TypeSecureValueHash as TypeSecureValueHash, TypeSecureValueType as TypeSecureValueType, TypeWallPaperSettings as TypeWallPaperSettings
from ...tl.types.account import TypePasswordInputSettings as TypePasswordInputSettings
from _typeshed import Incomplete
from datetime import datetime as datetime

class AcceptAuthorizationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot_id: Incomplete
    scope: Incomplete
    public_key: Incomplete
    value_hashes: Incomplete
    credentials: Incomplete
    def __init__(self, bot_id: int, scope: str, public_key: str, value_hashes: list['TypeSecureValueHash'], credentials: TypeSecureCredentialsEncrypted) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CancelPasswordEmailRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ChangeAuthorizationSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    confirmed: Incomplete
    encrypted_requests_disabled: Incomplete
    call_requests_disabled: Incomplete
    def __init__(self, hash: int, confirmed: bool | None = None, encrypted_requests_disabled: bool | None = None, call_requests_disabled: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ChangePhoneRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phone_number: Incomplete
    phone_code_hash: Incomplete
    phone_code: Incomplete
    def __init__(self, phone_number: str, phone_code_hash: str, phone_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    username: Incomplete
    def __init__(self, username: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ClearRecentEmojiStatusesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ConfirmPasswordEmailRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    code: Incomplete
    def __init__(self, code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ConfirmPhoneRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phone_code_hash: Incomplete
    phone_code: Incomplete
    def __init__(self, phone_code_hash: str, phone_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateBusinessChatLinkRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    link: Incomplete
    def __init__(self, link: TypeInputBusinessChatLink) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    title: Incomplete
    document: Incomplete
    settings: Incomplete
    def __init__(self, slug: str, title: str, document: TypeInputDocument | None = None, settings: list['TypeInputThemeSettings'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeclinePasswordResetRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteAccountRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    reason: Incomplete
    password: Incomplete
    def __init__(self, reason: str, password: TypeInputCheckPasswordSRP | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteAutoSaveExceptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteBusinessChatLinkRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    def __init__(self, slug: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteSecureValueRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    types: Incomplete
    def __init__(self, types: list['TypeSecureValueType']) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DisablePeerConnectedBotRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditBusinessChatLinkRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    link: Incomplete
    def __init__(self, slug: str, link: TypeInputBusinessChatLink) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class FinishTakeoutSessionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    success: Incomplete
    def __init__(self, success: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAccountTTLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAllSecureValuesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAuthorizationFormRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot_id: Incomplete
    scope: Incomplete
    public_key: Incomplete
    def __init__(self, bot_id: int, scope: str, public_key: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAuthorizationsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAutoDownloadSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetAutoSaveSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBotBusinessConnectionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    connection_id: Incomplete
    def __init__(self, connection_id: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBusinessChatLinksRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChannelDefaultEmojiStatusesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChannelRestrictedStatusEmojisRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetChatThemesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetConnectedBotsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetContactSignUpNotificationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetContentSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDefaultBackgroundEmojisRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDefaultEmojiStatusesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDefaultGroupPhotoEmojisRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetDefaultProfilePhotoEmojisRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGlobalPrivacySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetMultiWallPapersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    wallpapers: Incomplete
    def __init__(self, wallpapers: list['TypeInputWallPaper']) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetNotifyExceptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    compare_sound: Incomplete
    compare_stories: Incomplete
    peer: Incomplete
    def __init__(self, compare_sound: bool | None = None, compare_stories: bool | None = None, peer: TypeInputNotifyPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetNotifySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputNotifyPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPasswordRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPasswordSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    password: Incomplete
    def __init__(self, password: TypeInputCheckPasswordSRP) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPrivacyRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    key: Incomplete
    def __init__(self, key: TypeInputPrivacyKey) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetReactionsNotifySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetRecentEmojiStatusesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedRingtonesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSecureValueRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    types: Incomplete
    def __init__(self, types: list['TypeSecureValueType']) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    format: Incomplete
    theme: Incomplete
    def __init__(self, format: str, theme: TypeInputTheme) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetThemesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    format: Incomplete
    hash: Incomplete
    def __init__(self, format: str, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetTmpPasswordRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    password: Incomplete
    period: Incomplete
    def __init__(self, password: TypeInputCheckPasswordSRP, period: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetWallPaperRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    wallpaper: Incomplete
    def __init__(self, wallpaper: TypeInputWallPaper) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetWallPapersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetWebAuthorizationsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InitTakeoutSessionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    contacts: Incomplete
    message_users: Incomplete
    message_chats: Incomplete
    message_megagroups: Incomplete
    message_channels: Incomplete
    files: Incomplete
    file_max_size: Incomplete
    def __init__(self, contacts: bool | None = None, message_users: bool | None = None, message_chats: bool | None = None, message_megagroups: bool | None = None, message_channels: bool | None = None, files: bool | None = None, file_max_size: int | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InstallThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    dark: Incomplete
    theme: Incomplete
    format: Incomplete
    base_theme: Incomplete
    def __init__(self, dark: bool | None = None, theme: TypeInputTheme | None = None, format: str | None = None, base_theme: TypeBaseTheme | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InstallWallPaperRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    wallpaper: Incomplete
    settings: Incomplete
    def __init__(self, wallpaper: TypeInputWallPaper, settings: TypeWallPaperSettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InvalidateSignInCodesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    codes: Incomplete
    def __init__(self, codes: list[str]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RegisterDeviceRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    token_type: Incomplete
    token: Incomplete
    app_sandbox: Incomplete
    secret: Incomplete
    other_uids: Incomplete
    no_muted: Incomplete
    def __init__(self, token_type: int, token: str, app_sandbox: bool, secret: bytes, other_uids: list[int], no_muted: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderUsernamesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    order: Incomplete
    def __init__(self, order: list[str]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportPeerRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    reason: Incomplete
    message: Incomplete
    def __init__(self, peer: TypeInputPeer, reason: TypeReportReason, message: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReportProfilePhotoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    photo_id: Incomplete
    reason: Incomplete
    message: Incomplete
    def __init__(self, peer: TypeInputPeer, photo_id: TypeInputPhoto, reason: TypeReportReason, message: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResendPasswordEmailRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetAuthorizationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetNotifySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetPasswordRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetWallPapersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetWebAuthorizationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetWebAuthorizationsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResolveBusinessChatLinkRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    def __init__(self, slug: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveAutoDownloadSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    settings: Incomplete
    low: Incomplete
    high: Incomplete
    def __init__(self, settings: TypeAutoDownloadSettings, low: bool | None = None, high: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveAutoSaveSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    settings: Incomplete
    users: Incomplete
    chats: Incomplete
    broadcasts: Incomplete
    peer: Incomplete
    def __init__(self, settings: TypeAutoSaveSettings, users: bool | None = None, chats: bool | None = None, broadcasts: bool | None = None, peer: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveRingtoneRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    unsave: Incomplete
    def __init__(self, id: TypeInputDocument, unsave: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveSecureValueRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    value: Incomplete
    secure_secret_id: Incomplete
    def __init__(self, value: TypeInputSecureValue, secure_secret_id: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    theme: Incomplete
    unsave: Incomplete
    def __init__(self, theme: TypeInputTheme, unsave: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveWallPaperRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    wallpaper: Incomplete
    unsave: Incomplete
    settings: Incomplete
    def __init__(self, wallpaper: TypeInputWallPaper, unsave: bool, settings: TypeWallPaperSettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendChangePhoneCodeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phone_number: Incomplete
    settings: Incomplete
    def __init__(self, phone_number: str, settings: TypeCodeSettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendConfirmPhoneCodeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    settings: Incomplete
    def __init__(self, hash: str, settings: TypeCodeSettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendVerifyEmailCodeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    purpose: Incomplete
    email: Incomplete
    def __init__(self, purpose: TypeEmailVerifyPurpose, email: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendVerifyPhoneCodeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phone_number: Incomplete
    settings: Incomplete
    def __init__(self, phone_number: str, settings: TypeCodeSettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetAccountTTLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    ttl: Incomplete
    def __init__(self, ttl: TypeAccountDaysTTL) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetAuthorizationTTLRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    authorization_ttl_days: Incomplete
    def __init__(self, authorization_ttl_days: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetContactSignUpNotificationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    silent: Incomplete
    def __init__(self, silent: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetContentSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    sensitive_enabled: Incomplete
    def __init__(self, sensitive_enabled: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetGlobalPrivacySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    settings: Incomplete
    def __init__(self, settings: TypeGlobalPrivacySettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetPrivacyRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    key: Incomplete
    rules: Incomplete
    def __init__(self, key: TypeInputPrivacyKey, rules: list['TypeInputPrivacyRule']) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetReactionsNotifySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    settings: Incomplete
    def __init__(self, settings: TypeReactionsNotifySettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleConnectedBotPausedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    paused: Incomplete
    def __init__(self, peer: TypeInputPeer, paused: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleSponsoredMessagesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    enabled: Incomplete
    def __init__(self, enabled: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    username: Incomplete
    active: Incomplete
    def __init__(self, username: str, active: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UnregisterDeviceRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    token_type: Incomplete
    token: Incomplete
    other_uids: Incomplete
    def __init__(self, token_type: int, token: str, other_uids: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateBirthdayRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    birthday: Incomplete
    def __init__(self, birthday: TypeBirthday | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateBusinessAwayMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    message: Incomplete
    def __init__(self, message: TypeInputBusinessAwayMessage | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateBusinessGreetingMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    message: Incomplete
    def __init__(self, message: TypeInputBusinessGreetingMessage | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateBusinessIntroRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    intro: Incomplete
    def __init__(self, intro: TypeInputBusinessIntro | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateBusinessLocationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    geo_point: Incomplete
    address: Incomplete
    def __init__(self, geo_point: TypeInputGeoPoint | None = None, address: str | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateBusinessWorkHoursRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    business_work_hours: Incomplete
    def __init__(self, business_work_hours: TypeBusinessWorkHours | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateColorRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    for_profile: Incomplete
    color: Incomplete
    background_emoji_id: Incomplete
    def __init__(self, for_profile: bool | None = None, color: int | None = None, background_emoji_id: int | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateConnectedBotRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    recipients: Incomplete
    can_reply: Incomplete
    deleted: Incomplete
    def __init__(self, bot: TypeInputUser, recipients: TypeInputBusinessBotRecipients, can_reply: bool | None = None, deleted: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateDeviceLockedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    period: Incomplete
    def __init__(self, period: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateEmojiStatusRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    emoji_status: Incomplete
    def __init__(self, emoji_status: TypeEmojiStatus) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateNotifySettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    settings: Incomplete
    def __init__(self, peer: TypeInputNotifyPeer, settings: TypeInputPeerNotifySettings) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdatePasswordSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    password: Incomplete
    new_settings: Incomplete
    def __init__(self, password: TypeInputCheckPasswordSRP, new_settings: TypePasswordInputSettings) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdatePersonalChannelRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    channel: Incomplete
    def __init__(self, channel: TypeInputChannel) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateProfileRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    first_name: Incomplete
    last_name: Incomplete
    about: Incomplete
    def __init__(self, first_name: str | None = None, last_name: str | None = None, about: str | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateStatusRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offline: Incomplete
    def __init__(self, offline: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    format: Incomplete
    theme: Incomplete
    slug: Incomplete
    title: Incomplete
    document: Incomplete
    settings: Incomplete
    def __init__(self, format: str, theme: TypeInputTheme, slug: str | None = None, title: str | None = None, document: TypeInputDocument | None = None, settings: list['TypeInputThemeSettings'] | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    username: Incomplete
    def __init__(self, username: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UploadRingtoneRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    file: Incomplete
    file_name: Incomplete
    mime_type: Incomplete
    def __init__(self, file: TypeInputFile, file_name: str, mime_type: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UploadThemeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    file: Incomplete
    file_name: Incomplete
    mime_type: Incomplete
    thumb: Incomplete
    def __init__(self, file: TypeInputFile, file_name: str, mime_type: str, thumb: TypeInputFile | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UploadWallPaperRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    file: Incomplete
    mime_type: Incomplete
    settings: Incomplete
    for_chat: Incomplete
    def __init__(self, file: TypeInputFile, mime_type: str, settings: TypeWallPaperSettings, for_chat: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class VerifyEmailRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    purpose: Incomplete
    verification: Incomplete
    def __init__(self, purpose: TypeEmailVerifyPurpose, verification: TypeEmailVerification) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class VerifyPhoneRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phone_number: Incomplete
    phone_code_hash: Incomplete
    phone_code: Incomplete
    def __init__(self, phone_number: str, phone_code_hash: str, phone_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
