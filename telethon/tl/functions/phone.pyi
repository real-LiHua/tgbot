from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeDataJSON as TypeDataJSON, TypeInputFile as TypeInputFile, TypeInputGroupCall as TypeInputGroupCall, TypeInputPeer as TypeInputPeer, TypeInputPhoneCall as TypeInputPhoneCall, TypeInputUser as TypeInputUser, TypePhoneCallDiscardReason as TypePhoneCallDiscardReason, TypePhoneCallProtocol as TypePhoneCallProtocol
from _typeshed import Incomplete
from datetime import datetime

class AcceptCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    g_b: Incomplete
    protocol: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, g_b: bytes, protocol: TypePhoneCallProtocol) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    sources: Incomplete
    def __init__(self, call: TypeInputGroupCall, sources: list[int]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class ConfirmCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    g_a: Incomplete
    key_fingerprint: Incomplete
    protocol: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, g_a: bytes, key_fingerprint: int, protocol: TypePhoneCallProtocol) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CreateGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    rtmp_stream: Incomplete
    random_id: Incomplete
    title: Incomplete
    schedule_date: Incomplete
    def __init__(self, peer: TypeInputPeer, rtmp_stream: bool | None = None, random_id: int = None, title: str | None = None, schedule_date: datetime | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DiscardCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    duration: Incomplete
    reason: Incomplete
    connection_id: Incomplete
    video: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, duration: int, reason: TypePhoneCallDiscardReason, connection_id: int, video: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DiscardGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    def __init__(self, call: TypeInputGroupCall) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditGroupCallParticipantRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    participant: Incomplete
    muted: Incomplete
    volume: Incomplete
    raise_hand: Incomplete
    video_stopped: Incomplete
    video_paused: Incomplete
    presentation_paused: Incomplete
    def __init__(self, call: TypeInputGroupCall, participant: TypeInputPeer, muted: bool | None = None, volume: int | None = None, raise_hand: bool | None = None, video_stopped: bool | None = None, video_paused: bool | None = None, presentation_paused: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditGroupCallTitleRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    title: Incomplete
    def __init__(self, call: TypeInputGroupCall, title: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportGroupCallInviteRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    can_self_unmute: Incomplete
    def __init__(self, call: TypeInputGroupCall, can_self_unmute: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetCallConfigRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    limit: Incomplete
    def __init__(self, call: TypeInputGroupCall, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGroupCallJoinAsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGroupCallStreamChannelsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    def __init__(self, call: TypeInputGroupCall) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGroupCallStreamRtmpUrlRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    revoke: Incomplete
    def __init__(self, peer: TypeInputPeer, revoke: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGroupParticipantsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    ids: Incomplete
    sources: Incomplete
    offset: Incomplete
    limit: Incomplete
    def __init__(self, call: TypeInputGroupCall, ids: list['TypeInputPeer'], sources: list[int], offset: str, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InviteToGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    users: Incomplete
    def __init__(self, call: TypeInputGroupCall, users: list['TypeInputUser']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class JoinGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    join_as: Incomplete
    params: Incomplete
    muted: Incomplete
    video_stopped: Incomplete
    invite_hash: Incomplete
    def __init__(self, call: TypeInputGroupCall, join_as: TypeInputPeer, params: TypeDataJSON, muted: bool | None = None, video_stopped: bool | None = None, invite_hash: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class JoinGroupCallPresentationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    params: Incomplete
    def __init__(self, call: TypeInputGroupCall, params: TypeDataJSON) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class LeaveGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    source: Incomplete
    def __init__(self, call: TypeInputGroupCall, source: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class LeaveGroupCallPresentationRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    def __init__(self, call: TypeInputGroupCall) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReceivedCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPhoneCall) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RequestCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    g_a_hash: Incomplete
    protocol: Incomplete
    video: Incomplete
    random_id: Incomplete
    def __init__(self, user_id: TypeInputUser, g_a_hash: bytes, protocol: TypePhoneCallProtocol, video: bool | None = None, random_id: int = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveCallDebugRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    debug: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, debug: TypeDataJSON) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveCallLogRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    file: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, file: TypeInputFile) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveDefaultGroupCallJoinAsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    join_as: Incomplete
    def __init__(self, peer: TypeInputPeer, join_as: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendSignalingDataRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    data: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, data: bytes) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetCallRatingRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    rating: Incomplete
    comment: Incomplete
    user_initiative: Incomplete
    def __init__(self, peer: TypeInputPhoneCall, rating: int, comment: str, user_initiative: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class StartScheduledGroupCallRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    def __init__(self, call: TypeInputGroupCall) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleGroupCallRecordRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    start: Incomplete
    video: Incomplete
    title: Incomplete
    video_portrait: Incomplete
    def __init__(self, call: TypeInputGroupCall, start: bool | None = None, video: bool | None = None, title: str | None = None, video_portrait: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleGroupCallSettingsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    reset_invite_hash: Incomplete
    join_muted: Incomplete
    def __init__(self, call: TypeInputGroupCall, reset_invite_hash: bool | None = None, join_muted: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleGroupCallStartSubscriptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    call: Incomplete
    subscribed: Incomplete
    def __init__(self, call: TypeInputGroupCall, subscribed: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
