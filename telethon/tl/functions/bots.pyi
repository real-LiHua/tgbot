from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeBotCommand as TypeBotCommand, TypeBotCommandScope as TypeBotCommandScope, TypeBotMenuButton as TypeBotMenuButton, TypeChatAdminRights as TypeChatAdminRights, TypeDataJSON as TypeDataJSON, TypeEmojiStatus as TypeEmojiStatus, TypeInputMedia as TypeInputMedia, TypeInputUser as TypeInputUser
from _typeshed import Incomplete
from datetime import datetime as datetime

class AddPreviewMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    lang_code: Incomplete
    media: Incomplete
    def __init__(self, bot: TypeInputUser, lang_code: str, media: TypeInputMedia) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AllowSendMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    def __init__(self, bot: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AnswerWebhookJSONQueryRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    query_id: Incomplete
    data: Incomplete
    def __init__(self, query_id: int, data: TypeDataJSON) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CanSendMessageRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    def __init__(self, bot: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckDownloadFileParamsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    file_name: Incomplete
    url: Incomplete
    def __init__(self, bot: TypeInputUser, file_name: str, url: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeletePreviewMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    lang_code: Incomplete
    media: Incomplete
    def __init__(self, bot: TypeInputUser, lang_code: str, media: list['TypeInputMedia']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditPreviewMediaRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    lang_code: Incomplete
    media: Incomplete
    new_media: Incomplete
    def __init__(self, bot: TypeInputUser, lang_code: str, media: TypeInputMedia, new_media: TypeInputMedia) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBotCommandsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    scope: Incomplete
    lang_code: Incomplete
    def __init__(self, scope: TypeBotCommandScope, lang_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBotInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    lang_code: Incomplete
    bot: Incomplete
    def __init__(self, lang_code: str, bot: TypeInputUser | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBotMenuButtonRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    def __init__(self, user_id: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPopularAppBotsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset: Incomplete
    limit: Incomplete
    def __init__(self, offset: str, limit: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPreviewInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    lang_code: Incomplete
    def __init__(self, bot: TypeInputUser, lang_code: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPreviewMediasRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    def __init__(self, bot: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class InvokeWebViewCustomMethodRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    custom_method: Incomplete
    params: Incomplete
    def __init__(self, bot: TypeInputUser, custom_method: str, params: TypeDataJSON) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderPreviewMediasRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    lang_code: Incomplete
    order: Incomplete
    def __init__(self, bot: TypeInputUser, lang_code: str, order: list['TypeInputMedia']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ReorderUsernamesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    order: Incomplete
    def __init__(self, bot: TypeInputUser, order: list[str]) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetBotCommandsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    scope: Incomplete
    lang_code: Incomplete
    def __init__(self, scope: TypeBotCommandScope, lang_code: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendCustomRequestRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    custom_method: Incomplete
    params: Incomplete
    def __init__(self, custom_method: str, params: TypeDataJSON) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotBroadcastDefaultAdminRightsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    admin_rights: Incomplete
    def __init__(self, admin_rights: TypeChatAdminRights) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotCommandsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    scope: Incomplete
    lang_code: Incomplete
    commands: Incomplete
    def __init__(self, scope: TypeBotCommandScope, lang_code: str, commands: list['TypeBotCommand']) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotGroupDefaultAdminRightsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    admin_rights: Incomplete
    def __init__(self, admin_rights: TypeChatAdminRights) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    lang_code: Incomplete
    bot: Incomplete
    name: Incomplete
    about: Incomplete
    description: Incomplete
    def __init__(self, lang_code: str, bot: TypeInputUser | None = None, name: str | None = None, about: str | None = None, description: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBotMenuButtonRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    button: Incomplete
    def __init__(self, user_id: TypeInputUser, button: TypeBotMenuButton) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleUserEmojiStatusPermissionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    enabled: Incomplete
    def __init__(self, bot: TypeInputUser, enabled: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    bot: Incomplete
    username: Incomplete
    active: Incomplete
    def __init__(self, bot: TypeInputUser, username: str, active: bool) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UpdateUserEmojiStatusRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    emoji_status: Incomplete
    def __init__(self, user_id: TypeInputUser, emoji_status: TypeEmojiStatus) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
