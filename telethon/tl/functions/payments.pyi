from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeDataJSON as TypeDataJSON, TypeInputCheckPasswordSRP as TypeInputCheckPasswordSRP, TypeInputInvoice as TypeInputInvoice, TypeInputMedia as TypeInputMedia, TypeInputPaymentCredentials as TypeInputPaymentCredentials, TypeInputPeer as TypeInputPeer, TypeInputStarsTransaction as TypeInputStarsTransaction, TypeInputStorePaymentPurpose as TypeInputStorePaymentPurpose, TypeInputUser as TypeInputUser, TypePaymentRequestedInfo as TypePaymentRequestedInfo
from _typeshed import Incomplete
from datetime import datetime as datetime

class ApplyGiftCodeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    def __init__(self, slug: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AssignAppStoreTransactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    receipt: Incomplete
    purpose: Incomplete
    def __init__(self, receipt: bytes, purpose: TypeInputStorePaymentPurpose) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AssignPlayMarketTransactionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    receipt: Incomplete
    purpose: Incomplete
    def __init__(self, receipt: TypeDataJSON, purpose: TypeInputStorePaymentPurpose) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class BotCancelStarsSubscriptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    restore: Incomplete
    invoice_slug: Incomplete
    charge_id: Incomplete
    def __init__(self, user_id: TypeInputUser, restore: bool | None = None, invoice_slug: str | None = None, charge_id: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CanPurchasePremiumRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    purpose: Incomplete
    def __init__(self, purpose: TypeInputStorePaymentPurpose) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ChangeStarsSubscriptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    subscription_id: Incomplete
    canceled: Incomplete
    def __init__(self, peer: TypeInputPeer, subscription_id: str, canceled: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class CheckGiftCodeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    slug: Incomplete
    def __init__(self, slug: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ClearSavedInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    credentials: Incomplete
    info: Incomplete
    def __init__(self, credentials: bool | None = None, info: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ConvertStarGiftRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    msg_id: Incomplete
    def __init__(self, user_id: TypeInputUser, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportInvoiceRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    invoice_media: Incomplete
    def __init__(self, invoice_media: TypeInputMedia) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class FulfillStarsSubscriptionRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    subscription_id: Incomplete
    def __init__(self, peer: TypeInputPeer, subscription_id: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBankCardDataRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    number: Incomplete
    def __init__(self, number: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetGiveawayInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPaymentFormRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    invoice: Incomplete
    theme_params: Incomplete
    def __init__(self, invoice: TypeInputInvoice, theme_params: TypeDataJSON | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPaymentReceiptRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    msg_id: Incomplete
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetPremiumGiftCodeOptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    boost_peer: Incomplete
    def __init__(self, boost_peer: TypeInputPeer | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarGiftsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsGiftOptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    def __init__(self, user_id: TypeInputUser | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsGiveawayOptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsRevenueAdsAccountUrlRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsRevenueStatsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    dark: Incomplete
    def __init__(self, peer: TypeInputPeer, dark: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsRevenueWithdrawalUrlRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    stars: Incomplete
    password: Incomplete
    def __init__(self, peer: TypeInputPeer, stars: int, password: TypeInputCheckPasswordSRP) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsStatusRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    def __init__(self, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsSubscriptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset: Incomplete
    missing_balance: Incomplete
    def __init__(self, peer: TypeInputPeer, offset: str, missing_balance: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsTopupOptionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsTransactionsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    offset: Incomplete
    limit: Incomplete
    inbound: Incomplete
    outbound: Incomplete
    ascending: Incomplete
    subscription_id: Incomplete
    def __init__(self, peer: TypeInputPeer, offset: str, limit: int, inbound: bool | None = None, outbound: bool | None = None, ascending: bool | None = None, subscription_id: str | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStarsTransactionsByIDRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    id: Incomplete
    def __init__(self, peer: TypeInputPeer, id: list['TypeInputStarsTransaction']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetUserStarGiftsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    offset: Incomplete
    limit: Incomplete
    def __init__(self, user_id: TypeInputUser, offset: str, limit: int) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class LaunchPrepaidGiveawayRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    peer: Incomplete
    giveaway_id: Incomplete
    purpose: Incomplete
    def __init__(self, peer: TypeInputPeer, giveaway_id: int, purpose: TypeInputStorePaymentPurpose) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class RefundStarsChargeRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    charge_id: Incomplete
    def __init__(self, user_id: TypeInputUser, charge_id: str) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SaveStarGiftRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    user_id: Incomplete
    msg_id: Incomplete
    unsave: Incomplete
    def __init__(self, user_id: TypeInputUser, msg_id: int, unsave: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendPaymentFormRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    form_id: Incomplete
    invoice: Incomplete
    credentials: Incomplete
    requested_info_id: Incomplete
    shipping_option_id: Incomplete
    tip_amount: Incomplete
    def __init__(self, form_id: int, invoice: TypeInputInvoice, credentials: TypeInputPaymentCredentials, requested_info_id: str | None = None, shipping_option_id: str | None = None, tip_amount: int | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SendStarsFormRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    form_id: Incomplete
    invoice: Incomplete
    def __init__(self, form_id: int, invoice: TypeInputInvoice) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ValidateRequestedInfoRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    invoice: Incomplete
    info: Incomplete
    save: Incomplete
    def __init__(self, invoice: TypeInputInvoice, info: TypePaymentRequestedInfo, save: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
