from ...tl.tlobject import TLObject as TLObject, TLRequest as TLRequest
from ...tl.types import TypeInputContact as TypeInputContact, TypeInputGeoPoint as TypeInputGeoPoint, TypeInputPeer as TypeInputPeer, TypeInputUser as TypeInputUser, TypeTopPeerCategory as TypeTopPeerCategory
from _typeshed import Incomplete
from datetime import datetime as datetime

class AcceptContactRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: TypeInputUser) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class AddContactRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    first_name: Incomplete
    last_name: Incomplete
    phone: Incomplete
    add_phone_privacy_exception: Incomplete
    def __init__(self, id: TypeInputUser, first_name: str, last_name: str, phone: str, add_phone_privacy_exception: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class BlockRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    my_stories_from: Incomplete
    def __init__(self, id: TypeInputPeer, my_stories_from: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class BlockFromRepliesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    msg_id: Incomplete
    delete_message: Incomplete
    delete_history: Incomplete
    report_spam: Incomplete
    def __init__(self, msg_id: int, delete_message: bool | None = None, delete_history: bool | None = None, report_spam: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteByPhonesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phones: Incomplete
    def __init__(self, phones: list[str]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class DeleteContactsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list['TypeInputUser']) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class EditCloseFriendsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    def __init__(self, id: list[int]) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ExportContactTokenRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBirthdaysRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetBlockedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset: Incomplete
    limit: Incomplete
    my_stories_from: Incomplete
    def __init__(self, offset: int, limit: int, my_stories_from: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetContactIDsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
    @staticmethod
    def read_result(reader): ...

class GetContactsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    hash: Incomplete
    def __init__(self, hash: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetLocatedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    geo_point: Incomplete
    background: Incomplete
    self_expires: Incomplete
    def __init__(self, geo_point: TypeInputGeoPoint, background: bool | None = None, self_expires: int | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetSavedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetStatusesRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class GetTopPeersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    offset: Incomplete
    limit: Incomplete
    hash: Incomplete
    correspondents: Incomplete
    bots_pm: Incomplete
    bots_inline: Incomplete
    phone_calls: Incomplete
    forward_users: Incomplete
    forward_chats: Incomplete
    groups: Incomplete
    channels: Incomplete
    bots_app: Incomplete
    def __init__(self, offset: int, limit: int, hash: int, correspondents: bool | None = None, bots_pm: bool | None = None, bots_inline: bool | None = None, phone_calls: bool | None = None, forward_users: bool | None = None, forward_chats: bool | None = None, groups: bool | None = None, channels: bool | None = None, bots_app: bool | None = None) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ImportContactTokenRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    token: Incomplete
    def __init__(self, token: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ImportContactsRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    contacts: Incomplete
    def __init__(self, contacts: list['TypeInputContact']) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetSavedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResetTopPeerRatingRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    category: Incomplete
    peer: Incomplete
    def __init__(self, category: TypeTopPeerCategory, peer: TypeInputPeer) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResolvePhoneRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    phone: Incomplete
    def __init__(self, phone: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ResolveUsernameRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    username: Incomplete
    def __init__(self, username: str) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SearchRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    q: Incomplete
    limit: Incomplete
    def __init__(self, q: str, limit: int) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class SetBlockedRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    limit: Incomplete
    my_stories_from: Incomplete
    def __init__(self, id: list['TypeInputPeer'], limit: int, my_stories_from: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class ToggleTopPeersRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    enabled: Incomplete
    def __init__(self, enabled: bool) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...

class UnblockRequest(TLRequest):
    CONSTRUCTOR_ID: int
    SUBCLASS_OF_ID: int
    id: Incomplete
    my_stories_from: Incomplete
    def __init__(self, id: TypeInputPeer, my_stories_from: bool | None = None) -> None: ...
    async def resolve(self, client, utils) -> None: ...
    def to_dict(self): ...
    @classmethod
    def from_reader(cls, reader): ...
