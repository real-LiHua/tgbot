from .. import types as types
from ... import utils as utils
from _typeshed import Incomplete

class Button:
    button: Incomplete
    resize: Incomplete
    single_use: Incomplete
    selective: Incomplete
    def __init__(self, button, *, resize, single_use, selective) -> None: ...
    @staticmethod
    def inline(text, data: Incomplete | None = None): ...
    @staticmethod
    def switch_inline(text, query: str = '', same_peer: bool = False): ...
    @staticmethod
    def url(text, url: Incomplete | None = None): ...
    @staticmethod
    def auth(text, url: Incomplete | None = None, *, bot: Incomplete | None = None, write_access: bool = False, fwd_text: Incomplete | None = None): ...
    @classmethod
    def text(cls, text, *, resize: Incomplete | None = None, single_use: Incomplete | None = None, selective: Incomplete | None = None): ...
    @classmethod
    def request_location(cls, text, *, resize: Incomplete | None = None, single_use: Incomplete | None = None, selective: Incomplete | None = None): ...
    @classmethod
    def request_phone(cls, text, *, resize: Incomplete | None = None, single_use: Incomplete | None = None, selective: Incomplete | None = None): ...
    @classmethod
    def request_poll(cls, text, *, force_quiz: bool = False, resize: Incomplete | None = None, single_use: Incomplete | None = None, selective: Incomplete | None = None): ...
    @staticmethod
    def clear(selective: Incomplete | None = None): ...
    @staticmethod
    def force_reply(single_use: Incomplete | None = None, selective: Incomplete | None = None, placeholder: Incomplete | None = None): ...
    @staticmethod
    def buy(text): ...
    @staticmethod
    def game(text): ...
