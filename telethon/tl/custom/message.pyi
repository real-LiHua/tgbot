from .. import TLObject as TLObject, alltlobjects as alltlobjects, functions as functions, types as types
from ... import errors as errors, utils as utils
from .chatgetter import ChatGetter as ChatGetter
from .file import File as File
from .forward import Forward as Forward
from .messagebutton import MessageButton as MessageButton
from .sendergetter import SenderGetter as SenderGetter
from _typeshed import Incomplete
from datetime import datetime

class Message(ChatGetter, SenderGetter, TLObject):
    id: Incomplete
    peer_id: Incomplete
    date: Incomplete
    message: Incomplete
    out: Incomplete
    mentioned: Incomplete
    media_unread: Incomplete
    silent: Incomplete
    post: Incomplete
    from_scheduled: Incomplete
    legacy: Incomplete
    edit_hide: Incomplete
    pinned: Incomplete
    noforwards: Incomplete
    invert_media: Incomplete
    offline: Incomplete
    video_processing_pending: Incomplete
    from_id: Incomplete
    from_boosts_applied: Incomplete
    saved_peer_id: Incomplete
    fwd_from: Incomplete
    via_bot_id: Incomplete
    via_business_bot_id: Incomplete
    reply_to: Incomplete
    media: Incomplete
    reply_markup: Incomplete
    entities: Incomplete
    views: Incomplete
    forwards: Incomplete
    replies: Incomplete
    edit_date: Incomplete
    post_author: Incomplete
    grouped_id: Incomplete
    reactions: Incomplete
    restriction_reason: Incomplete
    ttl_period: Incomplete
    quick_reply_shortcut_id: Incomplete
    effect: Incomplete
    factcheck: Incomplete
    action: Incomplete
    def __init__(self, id: int, peer_id: types.TypePeer, date: datetime | None = None, message: str | None = None, out: bool | None = None, mentioned: bool | None = None, media_unread: bool | None = None, silent: bool | None = None, post: bool | None = None, from_scheduled: bool | None = None, legacy: bool | None = None, edit_hide: bool | None = None, pinned: bool | None = None, noforwards: bool | None = None, invert_media: bool | None = None, offline: bool | None = None, video_processing_pending: bool | None = None, from_id: types.TypePeer | None = None, from_boosts_applied: int | None = None, saved_peer_id: types.TypePeer | None = None, fwd_from: types.TypeMessageFwdHeader | None = None, via_bot_id: int | None = None, via_business_bot_id: int | None = None, reply_to: types.TypeMessageReplyHeader | None = None, media: types.TypeMessageMedia | None = None, reply_markup: types.TypeReplyMarkup | None = None, entities: list[types.TypeMessageEntity] | None = None, views: int | None = None, forwards: int | None = None, replies: types.TypeMessageReplies | None = None, edit_date: datetime | None = None, post_author: str | None = None, grouped_id: int | None = None, reactions: types.TypeMessageReactions | None = None, restriction_reason: list[types.TypeRestrictionReason] | None = None, ttl_period: int | None = None, quick_reply_shortcut_id: int | None = None, effect: int | None = None, factcheck: types.TypeFactCheck | None = None, action: types.TypeMessageAction | None = None) -> None: ...
    @property
    def client(self): ...
    @property
    def text(self): ...
    @text.setter
    def text(self, value) -> None: ...
    @property
    def raw_text(self): ...
    @raw_text.setter
    def raw_text(self, value) -> None: ...
    @property
    def is_reply(self): ...
    @property
    def forward(self): ...
    @property
    def reply_to_chat(self): ...
    @property
    def reply_to_sender(self): ...
    @property
    def buttons(self): ...
    async def get_buttons(self): ...
    @property
    def button_count(self): ...
    @property
    def file(self): ...
    @property
    def photo(self): ...
    @property
    def document(self): ...
    @property
    def web_preview(self): ...
    @property
    def audio(self): ...
    @property
    def voice(self): ...
    @property
    def video(self): ...
    @property
    def video_note(self): ...
    @property
    def gif(self): ...
    @property
    def sticker(self): ...
    @property
    def contact(self): ...
    @property
    def game(self): ...
    @property
    def geo(self): ...
    @property
    def invoice(self): ...
    @property
    def poll(self): ...
    @property
    def venue(self): ...
    @property
    def dice(self): ...
    @property
    def action_entities(self): ...
    @property
    def via_bot(self): ...
    @property
    def via_input_bot(self): ...
    @property
    def reply_to_msg_id(self): ...
    @property
    def to_id(self): ...
    def get_entities_text(self, cls: Incomplete | None = None): ...
    async def get_reply_message(self): ...
    async def respond(self, *args, **kwargs): ...
    async def reply(self, *args, **kwargs): ...
    async def forward_to(self, *args, **kwargs): ...
    async def edit(self, *args, **kwargs): ...
    async def delete(self, *args, **kwargs): ...
    async def download_media(self, *args, **kwargs): ...
    async def click(self, i: Incomplete | None = None, j: Incomplete | None = None, *, text: Incomplete | None = None, filter: Incomplete | None = None, data: Incomplete | None = None, share_phone: Incomplete | None = None, share_geo: Incomplete | None = None, password: Incomplete | None = None): ...
    async def mark_read(self) -> None: ...
    async def pin(self, *, notify: bool = False, pm_oneside: bool = False): ...
    async def unpin(self): ...
