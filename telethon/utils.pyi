from .extensions import html as html, markdown as markdown
from .helpers import add_surrogate as add_surrogate, del_surrogate as del_surrogate, strip_text as strip_text
from .tl import types as types
from _typeshed import Incomplete
from collections.abc import Generator
from typing import NamedTuple

USERNAME_RE: Incomplete
TG_JOIN_RE: Incomplete
VALID_USERNAME_RE: Incomplete

class _FileInfo(NamedTuple):
    dc_id: Incomplete
    location: Incomplete
    size: Incomplete

def chunks(iterable, size: int = 100) -> Generator[Incomplete]: ...
def get_display_name(entity): ...
def get_extension(media): ...
def get_input_peer(entity, allow_self: bool = True, check_hash: bool = True): ...
def get_input_channel(entity): ...
def get_input_user(entity): ...
def get_input_dialog(dialog): ...
def get_input_document(document): ...
def get_input_photo(photo): ...
def get_input_chat_photo(photo): ...
def get_input_geo(geo): ...
def get_input_media(media, *, is_photo: bool = False, attributes: Incomplete | None = None, force_document: bool = False, voice_note: bool = False, video_note: bool = False, supports_streaming: bool = False, ttl: Incomplete | None = None): ...
def get_input_message(message): ...
def get_input_group_call(call): ...
def get_message_id(message): ...
def get_attributes(file, *, attributes: Incomplete | None = None, mime_type: Incomplete | None = None, force_document: bool = False, voice_note: bool = False, video_note: bool = False, supports_streaming: bool = False, thumb: Incomplete | None = None): ...
def sanitize_parse_mode(mode): ...
def get_input_location(location): ...
def is_image(file): ...
def is_gif(file): ...
def is_audio(file): ...
def is_video(file): ...
def is_list_like(obj): ...
def parse_phone(phone): ...
def parse_username(username): ...
def get_inner_text(text, entities): ...
def get_peer(peer): ...
def get_peer_id(peer, add_mark: bool = True): ...
def resolve_id(marked_id): ...
def resolve_bot_file_id(file_id): ...
def pack_bot_file_id(file): ...
def resolve_invite_link(link): ...
def resolve_inline_message_id(inline_msg_id): ...
def get_appropriated_part_size(file_size): ...
def encode_waveform(waveform): ...
def decode_waveform(waveform): ...
def split_text(text, entities, *, limit: int = 4096, max_entities: int = 100, split_at=('\\n', '\\s', '.')) -> Generator[Incomplete, None, Incomplete]: ...

class AsyncClassWrapper:
    wrapped: Incomplete
    def __init__(self, wrapped) -> None: ...
    def __getattr__(self, item): ...

def stripped_photo_to_jpg(stripped): ...
