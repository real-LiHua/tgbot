import abc
from ... import helpers as helpers
from ...errors import InvalidBufferError as InvalidBufferError, InvalidChecksumError as InvalidChecksumError
from _typeshed import Incomplete

class Connection(abc.ABC):
    packet_codec: Incomplete
    def __init__(self, ip, port, dc_id, *, loggers, proxy: Incomplete | None = None, local_addr: Incomplete | None = None) -> None: ...
    async def connect(self, timeout: Incomplete | None = None, ssl: Incomplete | None = None) -> None: ...
    async def disconnect(self) -> None: ...
    def send(self, data): ...
    async def recv(self): ...

class ObfuscatedConnection(Connection):
    obfuscated_io: Incomplete

class PacketCodec(abc.ABC, metaclass=abc.ABCMeta):
    tag: Incomplete
    def __init__(self, connection) -> None: ...
    @abc.abstractmethod
    def encode_packet(self, data): ...
    @abc.abstractmethod
    async def read_packet(self, reader): ...
