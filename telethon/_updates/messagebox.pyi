import datetime
from ..helpers import get_running_loop as get_running_loop
from .session import ChannelState as ChannelState, SessionState as SessionState
from _typeshed import Incomplete
from enum import Enum

NO_SEQ: int
BOT_CHANNEL_DIFF_LIMIT: int
USER_CHANNEL_DIFF_LIMIT: int
POSSIBLE_GAP_TIMEOUT: float
NO_UPDATES_TIMEOUT: Incomplete

class Sentinel:
    tag: Incomplete
    def __init__(self, tag: Incomplete | None = None) -> None: ...

ENTRY_ACCOUNT: Incomplete
ENTRY_SECRET: Incomplete
LOG_LEVEL_TRACE: Incomplete

def next_updates_deadline(): ...
def epoch(): ...

class GapError(ValueError): ...

class PrematureEndReason(Enum):
    TEMPORARY_SERVER_ISSUES = 'tmp'
    BANNED = 'ban'

class PtsInfo:
    pts: Incomplete
    pts_count: Incomplete
    entry: Incomplete
    def __init__(self, pts: int, pts_count: int, entry: object) -> None: ...
    @classmethod
    def from_update(cls, update): ...

class State:
    pts: Incomplete
    deadline: Incomplete
    def __init__(self, pts: int, deadline: float) -> None: ...

class PossibleGap:
    deadline: Incomplete
    updates: Incomplete
    def __init__(self, deadline: float, updates: list) -> None: ...

class MessageBox:
    map: Incomplete
    date: Incomplete
    seq: Incomplete
    next_deadline: Incomplete
    possible_gaps: Incomplete
    getting_diff_for: Incomplete
    def __init__(self, log, map: dict = ..., date: datetime.datetime = ..., seq: int = ..., next_deadline: object = None, possible_gaps: dict = ..., getting_diff_for: set = ...) -> None: ...
    def load(self, session_state, channel_states) -> None: ...
    def session_state(self): ...
    def is_empty(self) -> bool: ...
    def check_deadlines(self): ...
    def reset_deadlines(self, entries, deadline): ...
    def reset_channel_deadline(self, channel_id, timeout) -> None: ...
    def set_state(self, state, reset: bool = True) -> None: ...
    def try_set_channel_state(self, id, pts) -> None: ...
    def try_begin_get_diff(self, entry, reason) -> None: ...
    def end_get_diff(self, entry) -> None: ...
    def process_updates(self, updates, chat_hashes, result): ...
    def apply_pts_info(self, update, *, reset_deadlines, any_pts_applied=[True]): ...
    def get_difference(self): ...
    def apply_difference(self, diff, chat_hashes): ...
    def apply_difference_type(self, diff, chat_hashes): ...
    def end_difference(self) -> None: ...
    def get_channel_difference(self, chat_hashes): ...
    def apply_channel_difference(self, request, diff, chat_hashes): ...
    def end_channel_difference(self, request, reason: PrematureEndReason, chat_hashes): ...
