from ..tl.types import InputPeerChannel as InputPeerChannel, InputPeerChat as InputPeerChat, InputPeerUser as InputPeerUser
from _typeshed import Incomplete
from enum import IntEnum

class SessionState:
    user_id: Incomplete
    dc_id: Incomplete
    bot: Incomplete
    pts: Incomplete
    qts: Incomplete
    date: Incomplete
    seq: Incomplete
    takeout_id: Incomplete
    def __init__(self, user_id: int, dc_id: int, bot: bool, pts: int, qts: int, date: int, seq: int, takeout_id: int | None) -> None: ...

class ChannelState:
    channel_id: Incomplete
    pts: Incomplete
    def __init__(self, channel_id: int, pts: int) -> None: ...

class EntityType(IntEnum):
    USER = ...
    BOT = ...
    GROUP = ...
    CHANNEL = ...
    MEGAGROUP = ...
    GIGAGROUP = ...
    def canonical(self): ...

class Entity:
    ty: Incomplete
    id: Incomplete
    hash: Incomplete
    def __init__(self, ty: EntityType, id: int, hash: int) -> None: ...
    @property
    def is_user(self): ...
    @property
    def is_group(self): ...
    @property
    def is_broadcast(self): ...
    @classmethod
    def from_str(cls, string: str): ...
    @classmethod
    def from_bytes(cls, blob): ...
    def __bytes__(self) -> bytes: ...
