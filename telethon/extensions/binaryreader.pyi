from ..errors import TypeNotFoundError as TypeNotFoundError
from ..tl.alltlobjects import tlobjects as tlobjects
from ..tl.core import core_objects as core_objects
from _typeshed import Incomplete

class BinaryReader:
    stream: Incomplete
    def __init__(self, data) -> None: ...
    def read_byte(self): ...
    def read_int(self, signed: bool = True): ...
    def read_long(self, signed: bool = True): ...
    def read_float(self): ...
    def read_double(self): ...
    def read_large_int(self, bits, signed: bool = True): ...
    def read(self, length: int = -1): ...
    def get_bytes(self): ...
    def tgread_bytes(self): ...
    def tgread_string(self): ...
    def tgread_bool(self): ...
    def tgread_date(self): ...
    def tgread_object(self): ...
    def tgread_vector(self): ...
    def close(self) -> None: ...
    def tell_position(self): ...
    def set_position(self, position) -> None: ...
    def seek(self, offset) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
