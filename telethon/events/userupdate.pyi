from .. import utils as utils
from ..tl import types as types
from ..tl.custom.sendergetter import SenderGetter as SenderGetter
from .common import EventBuilder as EventBuilder, EventCommon as EventCommon, name_inner_event as name_inner_event
from _typeshed import Incomplete

class UserUpdate(EventBuilder):
    @classmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    class Event(EventCommon, SenderGetter):
        status: Incomplete
        action: Incomplete
        def __init__(self, peer, *, status: Incomplete | None = None, chat_peer: Incomplete | None = None, typing: Incomplete | None = None) -> None: ...
        @property
        def user(self): ...
        async def get_user(self): ...
        @property
        def input_user(self): ...
        async def get_input_user(self): ...
        @property
        def user_id(self): ...
        @property
        def typing(self): ...
        @property
        def uploading(self): ...
        @property
        def recording(self): ...
        @property
        def playing(self): ...
        @property
        def cancel(self): ...
        @property
        def geo(self): ...
        @property
        def audio(self): ...
        @property
        def round(self): ...
        @property
        def video(self): ...
        @property
        def contact(self): ...
        @property
        def document(self): ...
        @property
        def sticker(self): ...
        @property
        def photo(self): ...
        @property
        def last_seen(self): ...
        @property
        def until(self): ...
        @property
        def online(self): ...
        @property
        def recently(self): ...
        @property
        def within_weeks(self): ...
        @property
        def within_months(self): ...
