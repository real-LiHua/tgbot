from .. import helpers as helpers, utils as utils
from ..tl import custom as custom, functions as functions, types as types
from ..tl.custom.sendergetter import SenderGetter as SenderGetter
from .common import EventBuilder as EventBuilder, EventCommon as EventCommon, name_inner_event as name_inner_event
from _typeshed import Incomplete

class InlineQuery(EventBuilder):
    pattern: Incomplete
    def __init__(self, users: Incomplete | None = None, *, blacklist_users: bool = False, func: Incomplete | None = None, pattern: Incomplete | None = None) -> None: ...
    @classmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    def filter(self, event): ...
    class Event(EventCommon, SenderGetter):
        query: Incomplete
        pattern_match: Incomplete
        def __init__(self, query) -> None: ...
        @property
        def id(self): ...
        @property
        def text(self): ...
        @property
        def offset(self): ...
        @property
        def geo(self): ...
        @property
        def builder(self): ...
        async def answer(self, results: Incomplete | None = None, cache_time: int = 0, *, gallery: bool = False, next_offset: Incomplete | None = None, private: bool = False, switch_pm: Incomplete | None = None, switch_pm_param: str = ''): ...
