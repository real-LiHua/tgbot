from .. import utils as utils
from ..tl import functions as functions, types as types
from ..tl.custom.sendergetter import SenderGetter as SenderGetter
from .common import EventBuilder as EventBuilder, EventCommon as EventCommon, name_inner_event as name_inner_event
from _typeshed import Incomplete

class CallbackQuery(EventBuilder):
    match: Incomplete
    def __init__(self, chats: Incomplete | None = None, *, blacklist_chats: bool = False, func: Incomplete | None = None, data: Incomplete | None = None, pattern: Incomplete | None = None) -> None: ...
    @classmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    def filter(self, event): ...
    class Event(EventCommon, SenderGetter):
        query: Incomplete
        data_match: Incomplete
        pattern_match: Incomplete
        def __init__(self, query, peer, msg_id) -> None: ...
        @property
        def id(self): ...
        @property
        def message_id(self): ...
        @property
        def data(self): ...
        @property
        def chat_instance(self): ...
        async def get_message(self): ...
        async def answer(self, message: Incomplete | None = None, cache_time: int = 0, *, url: Incomplete | None = None, alert: bool = False): ...
        @property
        def via_inline(self): ...
        async def respond(self, *args, **kwargs): ...
        async def reply(self, *args, **kwargs): ...
        async def edit(self, *args, **kwargs): ...
        async def delete(self, *args, **kwargs): ...
