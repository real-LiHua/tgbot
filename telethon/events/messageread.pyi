from .. import utils as utils
from ..tl import types as types
from .common import EventBuilder as EventBuilder, EventCommon as EventCommon, name_inner_event as name_inner_event
from _typeshed import Incomplete

class MessageRead(EventBuilder):
    inbox: Incomplete
    def __init__(self, chats: Incomplete | None = None, *, blacklist_chats: bool = False, func: Incomplete | None = None, inbox: bool = False) -> None: ...
    @classmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    def filter(self, event): ...
    class Event(EventCommon):
        outbox: Incomplete
        contents: Incomplete
        max_id: Incomplete
        def __init__(self, peer: Incomplete | None = None, max_id: Incomplete | None = None, out: bool = False, contents: bool = False, message_ids: Incomplete | None = None) -> None: ...
        @property
        def inbox(self): ...
        @property
        def message_ids(self): ...
        async def get_messages(self): ...
        def is_read(self, message): ...
        def __contains__(self, message) -> bool: ...
