import abc
from .. import utils as utils
from ..tl import TLObject as TLObject, types as types
from ..tl.custom.chatgetter import ChatGetter as ChatGetter
from _typeshed import Incomplete

class EventBuilder(abc.ABC, metaclass=abc.ABCMeta):
    chats: Incomplete
    blacklist_chats: Incomplete
    resolved: bool
    func: Incomplete
    def __init__(self, chats: Incomplete | None = None, *, blacklist_chats: bool = False, func: Incomplete | None = None) -> None: ...
    @classmethod
    @abc.abstractmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    async def resolve(self, client) -> None: ...
    def filter(self, event): ...

class EventCommon(ChatGetter, abc.ABC):
    original_update: Incomplete
    def __init__(self, chat_peer: Incomplete | None = None, msg_id: Incomplete | None = None, broadcast: Incomplete | None = None) -> None: ...
    @property
    def client(self): ...
    def stringify(self): ...
    def to_dict(self): ...

def name_inner_event(cls): ...
