from .. import utils as utils
from ..tl import types as types
from ..tl.custom.sendergetter import SenderGetter as SenderGetter
from .common import EventBuilder as EventBuilder, EventCommon as EventCommon, name_inner_event as name_inner_event
from _typeshed import Incomplete

class AlbumHack:
    def __init__(self, client, event) -> None: ...
    def extend(self, messages) -> None: ...
    async def deliver_event(self) -> None: ...

class Album(EventBuilder):
    def __init__(self, chats: Incomplete | None = None, *, blacklist_chats: bool = False, func: Incomplete | None = None) -> None: ...
    @classmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    def filter(self, event): ...
    class Event(EventCommon, SenderGetter):
        messages: Incomplete
        def __init__(self, messages) -> None: ...
        @property
        def grouped_id(self): ...
        @property
        def text(self): ...
        @property
        def raw_text(self): ...
        @property
        def is_reply(self): ...
        @property
        def forward(self): ...
        async def get_reply_message(self): ...
        async def respond(self, *args, **kwargs): ...
        async def reply(self, *args, **kwargs): ...
        async def forward_to(self, *args, **kwargs): ...
        async def edit(self, *args, **kwargs): ...
        async def delete(self, *args, **kwargs): ...
        async def mark_read(self) -> None: ...
        async def pin(self, *, notify: bool = False): ...
        def __len__(self) -> int: ...
        def __iter__(self): ...
        def __getitem__(self, n): ...
