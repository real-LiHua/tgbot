from .. import utils as utils
from ..tl import types as types
from .common import EventBuilder as EventBuilder, EventCommon as EventCommon, name_inner_event as name_inner_event
from _typeshed import Incomplete

class ChatAction(EventBuilder):
    @classmethod
    def build(cls, update, others: Incomplete | None = None, self_id: Incomplete | None = None): ...
    class Event(EventCommon):
        action_message: Incomplete
        new_pin: Incomplete
        new_photo: Incomplete
        photo: Incomplete
        user_added: bool
        user_joined: bool
        user_left: bool
        user_kicked: bool
        created: Incomplete
        new_title: Incomplete
        new_score: Incomplete
        unpin: Incomplete
        def __init__(self, where, new_photo: Incomplete | None = None, added_by: Incomplete | None = None, kicked_by: Incomplete | None = None, created: Incomplete | None = None, users: Incomplete | None = None, new_title: Incomplete | None = None, pin_ids: Incomplete | None = None, pin: Incomplete | None = None, new_score: Incomplete | None = None) -> None: ...
        async def respond(self, *args, **kwargs): ...
        async def reply(self, *args, **kwargs): ...
        async def delete(self, *args, **kwargs): ...
        async def get_pinned_message(self): ...
        async def get_pinned_messages(self): ...
        @property
        def added_by(self): ...
        async def get_added_by(self): ...
        @property
        def kicked_by(self): ...
        async def get_kicked_by(self): ...
        @property
        def user(self): ...
        async def get_user(self): ...
        @property
        def input_user(self): ...
        async def get_input_user(self): ...
        @property
        def user_id(self): ...
        @property
        def users(self): ...
        async def get_users(self): ...
        @property
        def input_users(self): ...
        async def get_input_users(self): ...
        @property
        def user_ids(self): ...
