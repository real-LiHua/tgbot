from .. import utils as utils
from ..tl import TLObject as TLObject
from ..tl.types import InputDocument as InputDocument, InputPeerChannel as InputPeerChannel, InputPeerChat as InputPeerChat, InputPeerUser as InputPeerUser, InputPhoto as InputPhoto, PeerChannel as PeerChannel, PeerChat as PeerChat, PeerUser as PeerUser
from .abstract import Session as Session
from enum import Enum

class _SentFileType(Enum):
    DOCUMENT = 0
    PHOTO = 1
    @staticmethod
    def from_type(cls): ...

class MemorySession(Session):
    def __init__(self) -> None: ...
    def set_dc(self, dc_id, server_address, port) -> None: ...
    @property
    def dc_id(self): ...
    @property
    def server_address(self): ...
    @property
    def port(self): ...
    @property
    def auth_key(self): ...
    @auth_key.setter
    def auth_key(self, value) -> None: ...
    @property
    def takeout_id(self): ...
    @takeout_id.setter
    def takeout_id(self, value) -> None: ...
    def get_update_state(self, entity_id): ...
    def set_update_state(self, entity_id, state) -> None: ...
    def get_update_states(self): ...
    def close(self) -> None: ...
    def save(self) -> None: ...
    def delete(self) -> None: ...
    def process_entities(self, tlo) -> None: ...
    def get_entity_rows_by_phone(self, phone): ...
    def get_entity_rows_by_username(self, username): ...
    def get_entity_rows_by_name(self, name): ...
    def get_entity_rows_by_id(self, id, exact: bool = True): ...
    def get_input_entity(self, key): ...
    def cache_file(self, md5_digest, file_size, instance) -> None: ...
    def get_file(self, md5_digest, file_size, cls): ...
