import abc
from _typeshed import Incomplete
from abc import ABC, abstractmethod

class Session(ABC, metaclass=abc.ABCMeta):
    def __init__(self) -> None: ...
    def clone(self, to_instance: Incomplete | None = None): ...
    @abstractmethod
    def set_dc(self, dc_id, server_address, port): ...
    @property
    @abstractmethod
    def dc_id(self): ...
    @property
    @abstractmethod
    def server_address(self): ...
    @property
    @abstractmethod
    def port(self): ...
    @property
    @abstractmethod
    def auth_key(self): ...
    @auth_key.setter
    @abstractmethod
    def auth_key(self, value): ...
    @property
    @abstractmethod
    def takeout_id(self): ...
    @takeout_id.setter
    @abstractmethod
    def takeout_id(self, value): ...
    @abstractmethod
    def get_update_state(self, entity_id): ...
    @abstractmethod
    def set_update_state(self, entity_id, state): ...
    @abstractmethod
    def get_update_states(self): ...
    def close(self) -> None: ...
    @abstractmethod
    def save(self): ...
    @abstractmethod
    def delete(self): ...
    @classmethod
    def list_sessions(cls): ...
    @abstractmethod
    def process_entities(self, tlo): ...
    @abstractmethod
    def get_input_entity(self, key): ...
    @abstractmethod
    def cache_file(self, md5_digest, file_size, instance): ...
    @abstractmethod
    def get_file(self, md5_digest, file_size, cls): ...
