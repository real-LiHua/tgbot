from .utils import WeakFileLock as WeakFileLock
from _typeshed import Incomplete
from dataclasses import dataclass
from pathlib import Path

logger: Incomplete

@dataclass
class LocalDownloadFilePaths:
    file_path: Path
    lock_path: Path
    metadata_path: Path
    def incomplete_path(self, etag: str) -> Path: ...
    def __init__(self, file_path, lock_path, metadata_path) -> None: ...

@dataclass(frozen=True)
class LocalUploadFilePaths:
    path_in_repo: str
    file_path: Path
    lock_path: Path
    metadata_path: Path
    def __init__(self, path_in_repo, file_path, lock_path, metadata_path) -> None: ...

@dataclass
class LocalDownloadFileMetadata:
    filename: str
    commit_hash: str
    etag: str
    timestamp: float
    def __init__(self, filename, commit_hash, etag, timestamp) -> None: ...

@dataclass
class LocalUploadFileMetadata:
    size: int
    timestamp: float | None = ...
    should_ignore: bool | None = ...
    sha256: str | None = ...
    upload_mode: str | None = ...
    is_uploaded: bool = ...
    is_committed: bool = ...
    def save(self, paths: LocalUploadFilePaths) -> None: ...
    def __init__(self, size, timestamp=..., should_ignore=..., sha256=..., upload_mode=..., is_uploaded=..., is_committed=...) -> None: ...

def get_local_download_paths(local_dir: Path, filename: str) -> LocalDownloadFilePaths: ...
def get_local_upload_paths(local_dir: Path, filename: str) -> LocalUploadFilePaths: ...
def read_download_metadata(local_dir: Path, filename: str) -> LocalDownloadFileMetadata | None: ...
def read_upload_metadata(local_dir: Path, filename: str) -> LocalUploadFileMetadata: ...
def write_download_metadata(local_dir: Path, filename: str, commit_hash: str, etag: str) -> None: ...
