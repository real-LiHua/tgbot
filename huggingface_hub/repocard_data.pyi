from _typeshed import Incomplete
from dataclasses import dataclass
from huggingface_hub.utils import logging as logging, yaml_dump as yaml_dump
from typing import Any

logger: Incomplete

@dataclass
class EvalResult:
    task_type: str
    dataset_type: str
    dataset_name: str
    metric_type: str
    metric_value: Any
    task_name: str | None = ...
    dataset_config: str | None = ...
    dataset_split: str | None = ...
    dataset_revision: str | None = ...
    dataset_args: dict[str, Any] | None = ...
    metric_name: str | None = ...
    metric_config: str | None = ...
    metric_args: dict[str, Any] | None = ...
    verified: bool | None = ...
    verify_token: str | None = ...
    source_name: str | None = ...
    source_url: str | None = ...
    @property
    def unique_identifier(self) -> tuple: ...
    def is_equal_except_value(self, other: EvalResult) -> bool: ...
    def __post_init__(self) -> None: ...
    def __init__(self, task_type, dataset_type, dataset_name, metric_type, metric_value, task_name=..., dataset_config=..., dataset_split=..., dataset_revision=..., dataset_args=..., metric_name=..., metric_config=..., metric_args=..., verified=..., verify_token=..., source_name=..., source_url=...) -> None: ...

@dataclass
class CardData:
    def __init__(self, ignore_metadata_errors: bool = False, **kwargs) -> None: ...
    def to_dict(self): ...
    __dict__ = ...
    def to_yaml(self, line_break: Incomplete | None = None, original_order: list[str] | None = None) -> str: ...
    def get(self, key: str, default: Any = None) -> Any: ...
    def pop(self, key: str, default: Any = None) -> Any: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def __len__(self) -> int: ...

class ModelCardData(CardData):
    base_model: Incomplete
    datasets: Incomplete
    eval_results: Incomplete
    language: Incomplete
    library_name: Incomplete
    license: Incomplete
    license_name: Incomplete
    license_link: Incomplete
    metrics: Incomplete
    model_name: Incomplete
    pipeline_tag: Incomplete
    tags: Incomplete
    def __init__(self, *, base_model: str | list[str] | None = None, datasets: list[str] | None = None, eval_results: list[EvalResult] | None = None, language: str | list[str] | None = None, library_name: str | None = None, license: str | None = None, license_name: str | None = None, license_link: str | None = None, metrics: list[str] | None = None, model_name: str | None = None, pipeline_tag: str | None = None, tags: list[str] | None = None, ignore_metadata_errors: bool = False, **kwargs) -> None: ...

class DatasetCardData(CardData):
    annotations_creators: Incomplete
    language_creators: Incomplete
    language: Incomplete
    license: Incomplete
    multilinguality: Incomplete
    size_categories: Incomplete
    source_datasets: Incomplete
    task_categories: Incomplete
    task_ids: Incomplete
    paperswithcode_id: Incomplete
    pretty_name: Incomplete
    config_names: Incomplete
    train_eval_index: Incomplete
    def __init__(self, *, language: str | list[str] | None = None, license: str | list[str] | None = None, annotations_creators: str | list[str] | None = None, language_creators: str | list[str] | None = None, multilinguality: str | list[str] | None = None, size_categories: str | list[str] | None = None, source_datasets: list[str] | None = None, task_categories: str | list[str] | None = None, task_ids: str | list[str] | None = None, paperswithcode_id: str | None = None, pretty_name: str | None = None, train_eval_index: dict | None = None, config_names: str | list[str] | None = None, ignore_metadata_errors: bool = False, **kwargs) -> None: ...

class SpaceCardData(CardData):
    title: Incomplete
    sdk: Incomplete
    sdk_version: Incomplete
    python_version: Incomplete
    app_file: Incomplete
    app_port: Incomplete
    license: Incomplete
    duplicated_from: Incomplete
    models: Incomplete
    datasets: Incomplete
    tags: Incomplete
    def __init__(self, *, title: str | None = None, sdk: str | None = None, sdk_version: str | None = None, python_version: str | None = None, app_file: str | None = None, app_port: int | None = None, license: str | None = None, duplicated_from: str | None = None, models: list[str] | None = None, datasets: list[str] | None = None, tags: list[str] | None = None, ignore_metadata_errors: bool = False, **kwargs) -> None: ...

def model_index_to_eval_results(model_index: list[dict[str, Any]]) -> tuple[str, list[EvalResult]]: ...
def eval_results_to_model_index(model_name: str, eval_results: list[EvalResult]) -> list[dict[str, Any]]: ...
