from . import constants as constants
from ._commit_api import CommitOperation as CommitOperation, CommitOperationAdd as CommitOperationAdd, CommitOperationCopy as CommitOperationCopy, CommitOperationDelete as CommitOperationDelete
from ._inference_endpoints import InferenceEndpoint as InferenceEndpoint, InferenceEndpointType as InferenceEndpointType
from ._multi_commits import MULTI_COMMIT_PR_CLOSE_COMMENT_FAILURE_BAD_REQUEST_TEMPLATE as MULTI_COMMIT_PR_CLOSE_COMMENT_FAILURE_BAD_REQUEST_TEMPLATE, MULTI_COMMIT_PR_CLOSE_COMMENT_FAILURE_NO_CHANGES_TEMPLATE as MULTI_COMMIT_PR_CLOSE_COMMENT_FAILURE_NO_CHANGES_TEMPLATE, MULTI_COMMIT_PR_CLOSING_COMMENT_TEMPLATE as MULTI_COMMIT_PR_CLOSING_COMMENT_TEMPLATE, MULTI_COMMIT_PR_COMPLETION_COMMENT_TEMPLATE as MULTI_COMMIT_PR_COMPLETION_COMMENT_TEMPLATE, MultiCommitException as MultiCommitException, MultiCommitStep as MultiCommitStep, MultiCommitStrategy as MultiCommitStrategy, multi_commit_create_pull_request as multi_commit_create_pull_request, multi_commit_generate_comment as multi_commit_generate_comment, multi_commit_parse_pr_description as multi_commit_parse_pr_description, plan_multi_commits as plan_multi_commits
from ._space_api import SpaceHardware as SpaceHardware, SpaceRuntime as SpaceRuntime, SpaceStorage as SpaceStorage, SpaceVariable as SpaceVariable
from ._upload_large_folder import upload_large_folder_internal as upload_large_folder_internal
from .community import Discussion as Discussion, DiscussionComment as DiscussionComment, DiscussionStatusChange as DiscussionStatusChange, DiscussionTitleChange as DiscussionTitleChange, DiscussionWithDetails as DiscussionWithDetails, deserialize_event as deserialize_event
from .constants import DEFAULT_ETAG_TIMEOUT as DEFAULT_ETAG_TIMEOUT, DEFAULT_REQUEST_TIMEOUT as DEFAULT_REQUEST_TIMEOUT, DEFAULT_REVISION as DEFAULT_REVISION, DISCUSSION_STATUS as DISCUSSION_STATUS, DISCUSSION_TYPES as DISCUSSION_TYPES, DiscussionStatusFilter as DiscussionStatusFilter, DiscussionTypeFilter as DiscussionTypeFilter, ENDPOINT as ENDPOINT, INFERENCE_ENDPOINTS_ENDPOINT as INFERENCE_ENDPOINTS_ENDPOINT, REGEX_COMMIT_OID as REGEX_COMMIT_OID, REPO_TYPES as REPO_TYPES, REPO_TYPES_MAPPING as REPO_TYPES_MAPPING, REPO_TYPES_URL_PREFIXES as REPO_TYPES_URL_PREFIXES, REPO_TYPE_MODEL as REPO_TYPE_MODEL, SAFETENSORS_INDEX_FILE as SAFETENSORS_INDEX_FILE, SAFETENSORS_MAX_HEADER_LENGTH as SAFETENSORS_MAX_HEADER_LENGTH, SAFETENSORS_SINGLE_FILE as SAFETENSORS_SINGLE_FILE, SPACES_SDK_TYPES as SPACES_SDK_TYPES, WEBHOOK_DOMAIN_T as WEBHOOK_DOMAIN_T
from .errors import BadRequestError as BadRequestError, EntryNotFoundError as EntryNotFoundError, GatedRepoError as GatedRepoError, HfHubHTTPError as HfHubHTTPError, RepositoryNotFoundError as RepositoryNotFoundError, RevisionNotFoundError as RevisionNotFoundError
from .file_download import HfFileMetadata as HfFileMetadata, get_hf_file_metadata as get_hf_file_metadata, hf_hub_url as hf_hub_url
from .repocard_data import DatasetCardData as DatasetCardData, ModelCardData as ModelCardData, SpaceCardData as SpaceCardData
from .utils import DEFAULT_IGNORE_PATTERNS as DEFAULT_IGNORE_PATTERNS, HfFolder as HfFolder, LocalTokenNotFoundError as LocalTokenNotFoundError, NotASafetensorsRepoError as NotASafetensorsRepoError, SafetensorsFileMetadata as SafetensorsFileMetadata, SafetensorsParsingError as SafetensorsParsingError, SafetensorsRepoMetadata as SafetensorsRepoMetadata, TensorInfo as TensorInfo, build_hf_headers as build_hf_headers, experimental as experimental, filter_repo_objects as filter_repo_objects, fix_hf_endpoint_in_url as fix_hf_endpoint_in_url, get_session as get_session, hf_raise_for_status as hf_raise_for_status, logging as logging, paginate as paginate, parse_datetime as parse_datetime, validate_hf_hub_args as validate_hf_hub_args
from .utils._typing import CallableT as CallableT
from _typeshed import Incomplete
from concurrent.futures import Future
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from tqdm.auto import tqdm as base_tqdm
from typing import Any, BinaryIO, Callable, Iterable, Iterator, Literal, TypeVar, overload

R = TypeVar('R')
CollectionItemType_T: Incomplete
ExpandModelProperty_T: Incomplete
ExpandDatasetProperty_T: Incomplete
ExpandSpaceProperty_T: Incomplete
USERNAME_PLACEHOLDER: str
logger: Incomplete

def repo_type_and_id_from_hf_id(hf_id: str, hub_url: str | None = None) -> tuple[str | None, str | None, str]: ...

@dataclass
class LastCommitInfo(dict):
    oid: str
    title: str
    date: datetime
    def __post_init__(self) -> None: ...
    def __init__(self, oid, title, date) -> None: ...

@dataclass
class BlobLfsInfo(dict):
    size: int
    sha256: str
    pointer_size: int
    def __post_init__(self) -> None: ...
    def __init__(self, size, sha256, pointer_size) -> None: ...

@dataclass
class BlobSecurityInfo(dict):
    safe: bool
    status: str
    av_scan: dict | None
    pickle_import_scan: dict | None
    def __post_init__(self) -> None: ...
    def __init__(self, safe, status, av_scan, pickle_import_scan) -> None: ...

@dataclass
class TransformersInfo(dict):
    auto_model: str
    custom_class: str | None = ...
    pipeline_tag: str | None = ...
    processor: str | None = ...
    def __post_init__(self) -> None: ...
    def __init__(self, auto_model, custom_class=..., pipeline_tag=..., processor=...) -> None: ...

@dataclass
class SafeTensorsInfo(dict):
    parameters: dict[str, int]
    total: int
    def __post_init__(self) -> None: ...
    def __init__(self, parameters, total) -> None: ...

@dataclass
class CommitInfo(str):
    commit_url: str
    commit_message: str
    commit_description: str
    oid: str
    pr_url: str | None = ...
    repo_url: RepoUrl = ...
    pr_revision: str | None = ...
    pr_num: str | None = ...
    def __new__(cls, *args, commit_url: str, _url: str | None = None, **kwargs): ...
    def __post_init__(self) -> None: ...
    def __init__(self, commit_url, commit_message, commit_description, oid, pr_url=..., _url=...) -> None: ...

@dataclass
class AccessRequest:
    username: str
    fullname: str
    email: str | None
    timestamp: datetime
    status: Literal['pending', 'accepted', 'rejected']
    fields: dict[str, Any] | None = ...
    def __init__(self, username, fullname, email, timestamp, status, fields=...) -> None: ...

@dataclass
class WebhookWatchedItem:
    type: Literal['dataset', 'model', 'org', 'space', 'user']
    name: str
    def __init__(self, type, name) -> None: ...

@dataclass
class WebhookInfo:
    id: str
    url: str
    watched: list[WebhookWatchedItem]
    domains: list[constants.WEBHOOK_DOMAIN_T]
    secret: str | None
    disabled: bool
    def __init__(self, id, url, watched, domains, secret, disabled) -> None: ...

class RepoUrl(str):
    def __new__(cls, url: Any, endpoint: str | None = None): ...
    endpoint: Incomplete
    namespace: Incomplete
    repo_name: Incomplete
    repo_id: Incomplete
    repo_type: Incomplete
    url: Incomplete
    def __init__(self, url: Any, endpoint: str | None = None) -> None: ...

@dataclass
class RepoSibling:
    rfilename: str
    size: int | None = ...
    blob_id: str | None = ...
    lfs: BlobLfsInfo | None = ...
    def __init__(self, rfilename, size=..., blob_id=..., lfs=...) -> None: ...

@dataclass
class RepoFile:
    path: str
    size: int
    blob_id: str
    lfs: BlobLfsInfo | None = ...
    last_commit: LastCommitInfo | None = ...
    security: BlobSecurityInfo | None = ...
    rfilename = ...
    lastCommit = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class RepoFolder:
    path: str
    tree_id: str
    last_commit: LastCommitInfo | None = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class ModelInfo:
    id: str
    author: str | None
    sha: str | None
    created_at: datetime | None
    last_modified: datetime | None
    private: bool | None
    disabled: bool | None
    downloads: int | None
    downloads_all_time: int | None
    gated: Literal['auto', 'manual', False] | None
    gguf: dict | None
    inference: Literal['warm', 'cold', 'frozen'] | None
    likes: int | None
    library_name: str | None
    tags: list[str] | None
    pipeline_tag: str | None
    mask_token: str | None
    card_data: ModelCardData | None
    widget_data: Any | None
    model_index: dict | None
    config: dict | None
    transformers_info: TransformersInfo | None
    trending_score: int | None
    siblings: list[RepoSibling] | None
    spaces: list[str] | None
    safetensors: SafeTensorsInfo | None
    security_repo_status: dict | None
    lastModified = ...
    cardData = ...
    transformersInfo = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class DatasetInfo:
    id: str
    author: str | None
    sha: str | None
    created_at: datetime | None
    last_modified: datetime | None
    private: bool | None
    gated: Literal['auto', 'manual', False] | None
    disabled: bool | None
    downloads: int | None
    downloads_all_time: int | None
    likes: int | None
    paperswithcode_id: str | None
    tags: list[str] | None
    trending_score: int | None
    card_data: DatasetCardData | None
    siblings: list[RepoSibling] | None
    lastModified = ...
    cardData = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class SpaceInfo:
    id: str
    author: str | None
    sha: str | None
    created_at: datetime | None
    last_modified: datetime | None
    private: bool | None
    gated: Literal['auto', 'manual', False] | None
    disabled: bool | None
    host: str | None
    subdomain: str | None
    likes: int | None
    sdk: str | None
    tags: list[str] | None
    siblings: list[RepoSibling] | None
    trending_score: int | None
    card_data: SpaceCardData | None
    runtime: SpaceRuntime | None
    models: list[str] | None
    datasets: list[str] | None
    lastModified = ...
    cardData = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class MetricInfo:
    id: str
    space_id: str
    description: str | None
    spaceId = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class CollectionItem:
    item_object_id: str
    item_id: str
    item_type: str
    position: int
    note: str | None = ...
    def __init__(self, _id: str, id: str, type: CollectionItemType_T, position: int, note: dict | None = None, **kwargs) -> None: ...

@dataclass
class Collection:
    slug: str
    title: str
    owner: str
    items: list[CollectionItem]
    last_updated: datetime
    position: int
    private: bool
    theme: str
    upvotes: int
    description: str | None = ...
    def __init__(self, **kwargs) -> None: ...
    @property
    def url(self) -> str: ...

@dataclass
class GitRefInfo:
    name: str
    ref: str
    target_commit: str
    def __init__(self, name, ref, target_commit) -> None: ...

@dataclass
class GitRefs:
    branches: list[GitRefInfo]
    converts: list[GitRefInfo]
    tags: list[GitRefInfo]
    pull_requests: list[GitRefInfo] | None = ...
    def __init__(self, branches, converts, tags, pull_requests=...) -> None: ...

@dataclass
class GitCommitInfo:
    commit_id: str
    authors: list[str]
    created_at: datetime
    title: str
    message: str
    formatted_title: str | None
    formatted_message: str | None
    def __init__(self, commit_id, authors, created_at, title, message, formatted_title, formatted_message) -> None: ...

@dataclass
class UserLikes:
    user: str
    total: int
    datasets: list[str]
    models: list[str]
    spaces: list[str]
    def __init__(self, user, total, datasets, models, spaces) -> None: ...

@dataclass
class Organization:
    avatar_url: str
    name: str
    fullname: str
    def __init__(self, **kwargs) -> None: ...

@dataclass
class User:
    username: str
    fullname: str
    avatar_url: str
    details: str | None = ...
    is_following: bool | None = ...
    is_pro: bool | None = ...
    num_models: int | None = ...
    num_datasets: int | None = ...
    num_spaces: int | None = ...
    num_discussions: int | None = ...
    num_papers: int | None = ...
    num_upvotes: int | None = ...
    num_likes: int | None = ...
    num_following: int | None = ...
    num_followers: int | None = ...
    orgs: list[Organization] = ...
    user_type = ...
    def __init__(self, **kwargs) -> None: ...

@dataclass
class PaperInfo:
    id: str
    authors: list[str] | None
    published_at: datetime | None
    title: str | None
    summary: str | None
    upvotes: int | None
    discussion_id: str | None
    source: str | None
    comments: int | None
    submitted_at: datetime | None
    submitted_by: User | None
    def __init__(self, **kwargs) -> None: ...

def future_compatible(fn: CallableT) -> CallableT: ...

class HfApi:
    endpoint: Incomplete
    token: Incomplete
    library_name: Incomplete
    library_version: Incomplete
    user_agent: Incomplete
    headers: Incomplete
    def __init__(self, endpoint: str | None = None, token: str | bool | None = None, library_name: str | None = None, library_version: str | None = None, user_agent: dict | str | None = None, headers: dict[str, str] | None = None) -> None: ...
    def run_as_future(self, fn: Callable[..., R], *args, **kwargs) -> Future[R]: ...
    def whoami(self, token: bool | str | None = None) -> dict: ...
    def get_token_permission(self, token: bool | str | None = None) -> Literal['read', 'write', None]: ...
    def get_model_tags(self) -> dict: ...
    def get_dataset_tags(self) -> dict: ...
    def list_models(self, *, filter: str | Iterable[str] | None = None, author: str | None = None, gated: bool | None = None, inference: Literal['cold', 'frozen', 'warm'] | None = None, library: str | list[str] | None = None, language: str | list[str] | None = None, model_name: str | None = None, task: str | list[str] | None = None, trained_dataset: str | list[str] | None = None, tags: str | list[str] | None = None, search: str | None = None, pipeline_tag: str | None = None, emissions_thresholds: tuple[float, float] | None = None, sort: Literal['last_modified'] | str | None = None, direction: Literal[-1] | None = None, limit: int | None = None, expand: list[ExpandModelProperty_T] | None = None, full: bool | None = None, cardData: bool = False, fetch_config: bool = False, token: bool | str | None = None) -> Iterable[ModelInfo]: ...
    def list_datasets(self, *, filter: str | Iterable[str] | None = None, author: str | None = None, benchmark: str | list[str] | None = None, dataset_name: str | None = None, gated: bool | None = None, language_creators: str | list[str] | None = None, language: str | list[str] | None = None, multilinguality: str | list[str] | None = None, size_categories: str | list[str] | None = None, tags: str | list[str] | None = None, task_categories: str | list[str] | None = None, task_ids: str | list[str] | None = None, search: str | None = None, sort: Literal['last_modified'] | str | None = None, direction: Literal[-1] | None = None, limit: int | None = None, expand: list[ExpandDatasetProperty_T] | None = None, full: bool | None = None, token: bool | str | None = None) -> Iterable[DatasetInfo]: ...
    def list_metrics(self) -> list[MetricInfo]: ...
    def list_spaces(self, *, filter: str | Iterable[str] | None = None, author: str | None = None, search: str | None = None, datasets: str | Iterable[str] | None = None, models: str | Iterable[str] | None = None, linked: bool = False, sort: Literal['last_modified'] | str | None = None, direction: Literal[-1] | None = None, limit: int | None = None, expand: list[ExpandSpaceProperty_T] | None = None, full: bool | None = None, token: bool | str | None = None) -> Iterable[SpaceInfo]: ...
    def like(self, repo_id: str, *, token: bool | str | None = None, repo_type: str | None = None) -> None: ...
    def unlike(self, repo_id: str, *, token: bool | str | None = None, repo_type: str | None = None) -> None: ...
    def list_liked_repos(self, user: str | None = None, *, token: bool | str | None = None) -> UserLikes: ...
    def list_repo_likers(self, repo_id: str, *, repo_type: str | None = None, token: bool | str | None = None) -> Iterable[User]: ...
    def model_info(self, repo_id: str, *, revision: str | None = None, timeout: float | None = None, securityStatus: bool | None = None, files_metadata: bool = False, expand: list[ExpandModelProperty_T] | None = None, token: bool | str | None = None) -> ModelInfo: ...
    def dataset_info(self, repo_id: str, *, revision: str | None = None, timeout: float | None = None, files_metadata: bool = False, expand: list[ExpandDatasetProperty_T] | None = None, token: bool | str | None = None) -> DatasetInfo: ...
    def space_info(self, repo_id: str, *, revision: str | None = None, timeout: float | None = None, files_metadata: bool = False, expand: list[ExpandModelProperty_T] | None = None, token: bool | str | None = None) -> SpaceInfo: ...
    def repo_info(self, repo_id: str, *, revision: str | None = None, repo_type: str | None = None, timeout: float | None = None, files_metadata: bool = False, expand: ExpandModelProperty_T | ExpandDatasetProperty_T | ExpandSpaceProperty_T | None = None, token: bool | str | None = None) -> ModelInfo | DatasetInfo | SpaceInfo: ...
    def repo_exists(self, repo_id: str, *, repo_type: str | None = None, token: str | bool | None = None) -> bool: ...
    def revision_exists(self, repo_id: str, revision: str, *, repo_type: str | None = None, token: str | bool | None = None) -> bool: ...
    def file_exists(self, repo_id: str, filename: str, *, repo_type: str | None = None, revision: str | None = None, token: str | bool | None = None) -> bool: ...
    def list_repo_files(self, repo_id: str, *, revision: str | None = None, repo_type: str | None = None, token: str | bool | None = None) -> list[str]: ...
    def list_repo_tree(self, repo_id: str, path_in_repo: str | None = None, *, recursive: bool = False, expand: bool = False, revision: str | None = None, repo_type: str | None = None, token: str | bool | None = None) -> Iterable[RepoFile | RepoFolder]: ...
    def list_repo_refs(self, repo_id: str, *, repo_type: str | None = None, include_pull_requests: bool = False, token: str | bool | None = None) -> GitRefs: ...
    def list_repo_commits(self, repo_id: str, *, repo_type: str | None = None, token: bool | str | None = None, revision: str | None = None, formatted: bool = False) -> list[GitCommitInfo]: ...
    def get_paths_info(self, repo_id: str, paths: list[str] | str, *, expand: bool = False, revision: str | None = None, repo_type: str | None = None, token: str | bool | None = None) -> list[RepoFile | RepoFolder]: ...
    def super_squash_history(self, repo_id: str, *, branch: str | None = None, commit_message: str | None = None, repo_type: str | None = None, token: str | bool | None = None) -> None: ...
    def create_repo(self, repo_id: str, *, token: str | bool | None = None, private: bool = False, repo_type: str | None = None, exist_ok: bool = False, resource_group_id: str | None = None, space_sdk: str | None = None, space_hardware: SpaceHardware | None = None, space_storage: SpaceStorage | None = None, space_sleep_time: int | None = None, space_secrets: list[dict[str, str]] | None = None, space_variables: list[dict[str, str]] | None = None) -> RepoUrl: ...
    def delete_repo(self, repo_id: str, *, token: str | bool | None = None, repo_type: str | None = None, missing_ok: bool = False) -> None: ...
    def update_repo_visibility(self, repo_id: str, private: bool = False, *, token: str | bool | None = None, repo_type: str | None = None) -> dict[str, bool]: ...
    def update_repo_settings(self, repo_id: str, *, gated: Literal['auto', 'manual', False] | None = None, private: bool | None = None, token: str | bool | None = None, repo_type: str | None = None) -> None: ...
    def move_repo(self, from_id: str, to_id: str, *, repo_type: str | None = None, token: str | bool | None = None): ...
    @overload
    def create_commit(self, repo_id: str, operations: Iterable[CommitOperation], *, commit_message: str, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, num_threads: int = 5, parent_commit: str | None = None, run_as_future: Literal[False] = ...) -> CommitInfo: ...
    @overload
    def create_commit(self, repo_id: str, operations: Iterable[CommitOperation], *, commit_message: str, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, num_threads: int = 5, parent_commit: str | None = None, run_as_future: Literal[True] = ...) -> Future[CommitInfo]: ...
    def create_commits_on_pr(self, *, repo_id: str, addition_commits: list[list[CommitOperationAdd]], deletion_commits: list[list[CommitOperationDelete]], commit_message: str, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, merge_pr: bool = True, num_threads: int = 5, verbose: bool = False) -> str: ...
    def preupload_lfs_files(self, repo_id: str, additions: Iterable[CommitOperationAdd], *, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, num_threads: int = 5, free_memory: bool = True, gitignore_content: str | None = None): ...
    @overload
    def upload_file(self, *, path_or_fileobj: str | Path | bytes | BinaryIO, path_in_repo: str, repo_id: str, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, commit_message: str | None = None, commit_description: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None, run_as_future: Literal[False] = ...) -> CommitInfo: ...
    @overload
    def upload_file(self, *, path_or_fileobj: str | Path | bytes | BinaryIO, path_in_repo: str, repo_id: str, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, commit_message: str | None = None, commit_description: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None, run_as_future: Literal[True] = ...) -> Future[CommitInfo]: ...
    @overload
    def upload_folder(self, *, repo_id: str, folder_path: str | Path, path_in_repo: str | None = None, commit_message: str | None = None, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None, allow_patterns: list[str] | str | None = None, ignore_patterns: list[str] | str | None = None, delete_patterns: list[str] | str | None = None, multi_commits: Literal[False] = ..., multi_commits_verbose: bool = False, run_as_future: Literal[False] = ...) -> CommitInfo: ...
    @overload
    def upload_folder(self, *, repo_id: str, folder_path: str | Path, path_in_repo: str | None = None, commit_message: str | None = None, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None, allow_patterns: list[str] | str | None = None, ignore_patterns: list[str] | str | None = None, delete_patterns: list[str] | str | None = None, multi_commits: Literal[True] = ..., multi_commits_verbose: bool = False, run_as_future: Literal[False] = ...) -> str: ...
    @overload
    def upload_folder(self, *, repo_id: str, folder_path: str | Path, path_in_repo: str | None = None, commit_message: str | None = None, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None, allow_patterns: list[str] | str | None = None, ignore_patterns: list[str] | str | None = None, delete_patterns: list[str] | str | None = None, multi_commits: Literal[False] = ..., multi_commits_verbose: bool = False, run_as_future: Literal[True] = ...) -> Future[CommitInfo]: ...
    @overload
    def upload_folder(self, *, repo_id: str, folder_path: str | Path, path_in_repo: str | None = None, commit_message: str | None = None, commit_description: str | None = None, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None, allow_patterns: list[str] | str | None = None, ignore_patterns: list[str] | str | None = None, delete_patterns: list[str] | str | None = None, multi_commits: Literal[True] = ..., multi_commits_verbose: bool = False, run_as_future: Literal[True] = ...) -> Future[str]: ...
    def delete_file(self, path_in_repo: str, repo_id: str, *, token: str | bool | None = None, repo_type: str | None = None, revision: str | None = None, commit_message: str | None = None, commit_description: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None) -> CommitInfo: ...
    def delete_files(self, repo_id: str, delete_patterns: list[str], *, token: bool | str | None = None, repo_type: str | None = None, revision: str | None = None, commit_message: str | None = None, commit_description: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None) -> CommitInfo: ...
    def delete_folder(self, path_in_repo: str, repo_id: str, *, token: bool | str | None = None, repo_type: str | None = None, revision: str | None = None, commit_message: str | None = None, commit_description: str | None = None, create_pr: bool | None = None, parent_commit: str | None = None) -> CommitInfo: ...
    def upload_large_folder(self, repo_id: str, folder_path: str | Path, *, repo_type: str, revision: str | None = None, private: bool = False, allow_patterns: list[str] | str | None = None, ignore_patterns: list[str] | str | None = None, num_workers: int | None = None, print_report: bool = True, print_report_every: int = 60) -> None: ...
    def get_hf_file_metadata(self, *, url: str, token: bool | str | None = None, proxies: dict | None = None, timeout: float | None = ...) -> HfFileMetadata: ...
    def hf_hub_download(self, repo_id: str, filename: str, *, subfolder: str | None = None, repo_type: str | None = None, revision: str | None = None, cache_dir: str | Path | None = None, local_dir: str | Path | None = None, force_download: bool = False, proxies: dict | None = None, etag_timeout: float = ..., token: bool | str | None = None, local_files_only: bool = False, resume_download: bool | None = None, force_filename: str | None = None, local_dir_use_symlinks: bool | Literal['auto'] = 'auto') -> str: ...
    def snapshot_download(self, repo_id: str, *, repo_type: str | None = None, revision: str | None = None, cache_dir: str | Path | None = None, local_dir: str | Path | None = None, proxies: dict | None = None, etag_timeout: float = ..., force_download: bool = False, token: bool | str | None = None, local_files_only: bool = False, allow_patterns: list[str] | str | None = None, ignore_patterns: list[str] | str | None = None, max_workers: int = 8, tqdm_class: base_tqdm | None = None, local_dir_use_symlinks: bool | Literal['auto'] = 'auto', resume_download: bool | None = None) -> str: ...
    def get_safetensors_metadata(self, repo_id: str, *, repo_type: str | None = None, revision: str | None = None, token: bool | str | None = None) -> SafetensorsRepoMetadata: ...
    def parse_safetensors_file_metadata(self, repo_id: str, filename: str, *, repo_type: str | None = None, revision: str | None = None, token: bool | str | None = None) -> SafetensorsFileMetadata: ...
    def create_branch(self, repo_id: str, *, branch: str, revision: str | None = None, token: bool | str | None = None, repo_type: str | None = None, exist_ok: bool = False) -> None: ...
    def delete_branch(self, repo_id: str, *, branch: str, token: bool | str | None = None, repo_type: str | None = None) -> None: ...
    def create_tag(self, repo_id: str, *, tag: str, tag_message: str | None = None, revision: str | None = None, token: bool | str | None = None, repo_type: str | None = None, exist_ok: bool = False) -> None: ...
    def delete_tag(self, repo_id: str, *, tag: str, token: bool | str | None = None, repo_type: str | None = None) -> None: ...
    def get_full_repo_name(self, model_id: str, *, organization: str | None = None, token: bool | str | None = None): ...
    def get_repo_discussions(self, repo_id: str, *, author: str | None = None, discussion_type: constants.DiscussionTypeFilter | None = None, discussion_status: constants.DiscussionStatusFilter | None = None, repo_type: str | None = None, token: bool | str | None = None) -> Iterator[Discussion]: ...
    def get_discussion_details(self, repo_id: str, discussion_num: int, *, repo_type: str | None = None, token: bool | str | None = None) -> DiscussionWithDetails: ...
    def create_discussion(self, repo_id: str, title: str, *, token: bool | str | None = None, description: str | None = None, repo_type: str | None = None, pull_request: bool = False) -> DiscussionWithDetails: ...
    def create_pull_request(self, repo_id: str, title: str, *, token: bool | str | None = None, description: str | None = None, repo_type: str | None = None) -> DiscussionWithDetails: ...
    def comment_discussion(self, repo_id: str, discussion_num: int, comment: str, *, token: bool | str | None = None, repo_type: str | None = None) -> DiscussionComment: ...
    def rename_discussion(self, repo_id: str, discussion_num: int, new_title: str, *, token: bool | str | None = None, repo_type: str | None = None) -> DiscussionTitleChange: ...
    def change_discussion_status(self, repo_id: str, discussion_num: int, new_status: Literal['open', 'closed'], *, token: bool | str | None = None, comment: str | None = None, repo_type: str | None = None) -> DiscussionStatusChange: ...
    def merge_pull_request(self, repo_id: str, discussion_num: int, *, token: bool | str | None = None, comment: str | None = None, repo_type: str | None = None): ...
    def edit_discussion_comment(self, repo_id: str, discussion_num: int, comment_id: str, new_content: str, *, token: bool | str | None = None, repo_type: str | None = None) -> DiscussionComment: ...
    def hide_discussion_comment(self, repo_id: str, discussion_num: int, comment_id: str, *, token: bool | str | None = None, repo_type: str | None = None) -> DiscussionComment: ...
    def add_space_secret(self, repo_id: str, key: str, value: str, *, description: str | None = None, token: bool | str | None = None) -> None: ...
    def delete_space_secret(self, repo_id: str, key: str, *, token: bool | str | None = None) -> None: ...
    def get_space_variables(self, repo_id: str, *, token: bool | str | None = None) -> dict[str, SpaceVariable]: ...
    def add_space_variable(self, repo_id: str, key: str, value: str, *, description: str | None = None, token: bool | str | None = None) -> dict[str, SpaceVariable]: ...
    def delete_space_variable(self, repo_id: str, key: str, *, token: bool | str | None = None) -> dict[str, SpaceVariable]: ...
    def get_space_runtime(self, repo_id: str, *, token: bool | str | None = None) -> SpaceRuntime: ...
    def request_space_hardware(self, repo_id: str, hardware: SpaceHardware, *, token: bool | str | None = None, sleep_time: int | None = None) -> SpaceRuntime: ...
    def set_space_sleep_time(self, repo_id: str, sleep_time: int, *, token: bool | str | None = None) -> SpaceRuntime: ...
    def pause_space(self, repo_id: str, *, token: bool | str | None = None) -> SpaceRuntime: ...
    def restart_space(self, repo_id: str, *, token: bool | str | None = None, factory_reboot: bool = False) -> SpaceRuntime: ...
    def duplicate_space(self, from_id: str, to_id: str | None = None, *, private: bool | None = None, token: bool | str | None = None, exist_ok: bool = False, hardware: SpaceHardware | None = None, storage: SpaceStorage | None = None, sleep_time: int | None = None, secrets: list[dict[str, str]] | None = None, variables: list[dict[str, str]] | None = None) -> RepoUrl: ...
    def request_space_storage(self, repo_id: str, storage: SpaceStorage, *, token: bool | str | None = None) -> SpaceRuntime: ...
    def delete_space_storage(self, repo_id: str, *, token: bool | str | None = None) -> SpaceRuntime: ...
    def list_inference_endpoints(self, namespace: str | None = None, *, token: bool | str | None = None) -> list[InferenceEndpoint]: ...
    def create_inference_endpoint(self, name: str, *, repository: str, framework: str, accelerator: str, instance_size: str, instance_type: str, region: str, vendor: str, account_id: str | None = None, min_replica: int = 0, max_replica: int = 1, scale_to_zero_timeout: int = 15, revision: str | None = None, task: str | None = None, custom_image: dict | None = None, secrets: dict[str, str] | None = None, type: InferenceEndpointType = ..., namespace: str | None = None, token: bool | str | None = None) -> InferenceEndpoint: ...
    def get_inference_endpoint(self, name: str, *, namespace: str | None = None, token: bool | str | None = None) -> InferenceEndpoint: ...
    def update_inference_endpoint(self, name: str, *, accelerator: str | None = None, instance_size: str | None = None, instance_type: str | None = None, min_replica: int | None = None, max_replica: int | None = None, scale_to_zero_timeout: int | None = None, repository: str | None = None, framework: str | None = None, revision: str | None = None, task: str | None = None, custom_image: dict | None = None, secrets: dict[str, str] | None = None, namespace: str | None = None, token: bool | str | None = None) -> InferenceEndpoint: ...
    def delete_inference_endpoint(self, name: str, *, namespace: str | None = None, token: bool | str | None = None) -> None: ...
    def pause_inference_endpoint(self, name: str, *, namespace: str | None = None, token: bool | str | None = None) -> InferenceEndpoint: ...
    def resume_inference_endpoint(self, name: str, *, namespace: str | None = None, running_ok: bool = True, token: bool | str | None = None) -> InferenceEndpoint: ...
    def scale_to_zero_inference_endpoint(self, name: str, *, namespace: str | None = None, token: bool | str | None = None) -> InferenceEndpoint: ...
    def list_collections(self, *, owner: list[str] | str | None = None, item: list[str] | str | None = None, sort: Literal['lastModified', 'trending', 'upvotes'] | None = None, limit: int | None = None, token: bool | str | None = None) -> Iterable[Collection]: ...
    def get_collection(self, collection_slug: str, *, token: bool | str | None = None) -> Collection: ...
    def create_collection(self, title: str, *, namespace: str | None = None, description: str | None = None, private: bool = False, exists_ok: bool = False, token: bool | str | None = None) -> Collection: ...
    def update_collection_metadata(self, collection_slug: str, *, title: str | None = None, description: str | None = None, position: int | None = None, private: bool | None = None, theme: str | None = None, token: bool | str | None = None) -> Collection: ...
    def delete_collection(self, collection_slug: str, *, missing_ok: bool = False, token: bool | str | None = None) -> None: ...
    def add_collection_item(self, collection_slug: str, item_id: str, item_type: CollectionItemType_T, *, note: str | None = None, exists_ok: bool = False, token: bool | str | None = None) -> Collection: ...
    def update_collection_item(self, collection_slug: str, item_object_id: str, *, note: str | None = None, position: int | None = None, token: bool | str | None = None) -> None: ...
    def delete_collection_item(self, collection_slug: str, item_object_id: str, *, missing_ok: bool = False, token: bool | str | None = None) -> None: ...
    def list_pending_access_requests(self, repo_id: str, *, repo_type: str | None = None, token: bool | str | None = None) -> list[AccessRequest]: ...
    def list_accepted_access_requests(self, repo_id: str, *, repo_type: str | None = None, token: bool | str | None = None) -> list[AccessRequest]: ...
    def list_rejected_access_requests(self, repo_id: str, *, repo_type: str | None = None, token: bool | str | None = None) -> list[AccessRequest]: ...
    def cancel_access_request(self, repo_id: str, user: str, *, repo_type: str | None = None, token: bool | str | None = None) -> None: ...
    def accept_access_request(self, repo_id: str, user: str, *, repo_type: str | None = None, token: bool | str | None = None) -> None: ...
    def reject_access_request(self, repo_id: str, user: str, *, repo_type: str | None = None, token: bool | str | None = None) -> None: ...
    def grant_access(self, repo_id: str, user: str, *, repo_type: str | None = None, token: bool | str | None = None) -> None: ...
    def get_webhook(self, webhook_id: str, *, token: bool | str | None = None) -> WebhookInfo: ...
    def list_webhooks(self, *, token: bool | str | None = None) -> list[WebhookInfo]: ...
    def create_webhook(self, *, url: str, watched: list[dict | WebhookWatchedItem], domains: list[constants.WEBHOOK_DOMAIN_T] | None = None, secret: str | None = None, token: bool | str | None = None) -> WebhookInfo: ...
    def update_webhook(self, webhook_id: str, *, url: str | None = None, watched: list[dict | WebhookWatchedItem] | None = None, domains: list[constants.WEBHOOK_DOMAIN_T] | None = None, secret: str | None = None, token: bool | str | None = None) -> WebhookInfo: ...
    def enable_webhook(self, webhook_id: str, *, token: bool | str | None = None) -> WebhookInfo: ...
    def disable_webhook(self, webhook_id: str, *, token: bool | str | None = None) -> WebhookInfo: ...
    def delete_webhook(self, webhook_id: str, *, token: bool | str | None = None) -> None: ...
    def get_user_overview(self, username: str, token: bool | str | None = None) -> User: ...
    def list_organization_members(self, organization: str, token: bool | str | None = None) -> Iterable[User]: ...
    def list_user_followers(self, username: str, token: bool | str | None = None) -> Iterable[User]: ...
    def list_user_following(self, username: str, token: bool | str | None = None) -> Iterable[User]: ...
    def list_papers(self, *, query: str | None = None, token: bool | str | None = None) -> Iterable[PaperInfo]: ...
    def paper_info(self, id: str) -> PaperInfo: ...
    def auth_check(self, repo_id: str, *, repo_type: str | None = None, token: bool | str | None = None) -> None: ...

api: Incomplete
whoami: Incomplete
auth_check: Incomplete
get_token_permission: Incomplete
list_models: Incomplete
model_info: Incomplete
list_datasets: Incomplete
dataset_info: Incomplete
list_spaces: Incomplete
space_info: Incomplete
list_papers: Incomplete
paper_info: Incomplete
repo_exists: Incomplete
revision_exists: Incomplete
file_exists: Incomplete
repo_info: Incomplete
list_repo_files: Incomplete
list_repo_refs: Incomplete
list_repo_commits: Incomplete
list_repo_tree: Incomplete
get_paths_info: Incomplete
list_metrics: Incomplete
get_model_tags: Incomplete
get_dataset_tags: Incomplete
create_commit: Incomplete
create_repo: Incomplete
delete_repo: Incomplete
update_repo_visibility: Incomplete
update_repo_settings: Incomplete
super_squash_history: Incomplete
move_repo: Incomplete
upload_file: Incomplete
upload_folder: Incomplete
delete_file: Incomplete
delete_folder: Incomplete
delete_files: Incomplete
create_commits_on_pr: Incomplete
upload_large_folder: Incomplete
preupload_lfs_files: Incomplete
create_branch: Incomplete
delete_branch: Incomplete
create_tag: Incomplete
delete_tag: Incomplete
get_full_repo_name: Incomplete
get_safetensors_metadata: Incomplete
parse_safetensors_file_metadata: Incomplete
run_as_future: Incomplete
list_liked_repos: Incomplete
list_repo_likers: Incomplete
like: Incomplete
unlike: Incomplete
get_discussion_details: Incomplete
get_repo_discussions: Incomplete
create_discussion: Incomplete
create_pull_request: Incomplete
change_discussion_status: Incomplete
comment_discussion: Incomplete
edit_discussion_comment: Incomplete
rename_discussion: Incomplete
merge_pull_request: Incomplete
add_space_secret: Incomplete
delete_space_secret: Incomplete
get_space_variables: Incomplete
add_space_variable: Incomplete
delete_space_variable: Incomplete
get_space_runtime: Incomplete
request_space_hardware: Incomplete
set_space_sleep_time: Incomplete
pause_space: Incomplete
restart_space: Incomplete
duplicate_space: Incomplete
request_space_storage: Incomplete
delete_space_storage: Incomplete
list_inference_endpoints: Incomplete
create_inference_endpoint: Incomplete
get_inference_endpoint: Incomplete
update_inference_endpoint: Incomplete
delete_inference_endpoint: Incomplete
pause_inference_endpoint: Incomplete
resume_inference_endpoint: Incomplete
scale_to_zero_inference_endpoint: Incomplete
get_collection: Incomplete
list_collections: Incomplete
create_collection: Incomplete
update_collection_metadata: Incomplete
delete_collection: Incomplete
add_collection_item: Incomplete
update_collection_item: Incomplete
delete_collection_item: Incomplete
list_pending_access_requests: Incomplete
list_accepted_access_requests: Incomplete
list_rejected_access_requests: Incomplete
cancel_access_request: Incomplete
accept_access_request: Incomplete
reject_access_request: Incomplete
grant_access: Incomplete
create_webhook: Incomplete
disable_webhook: Incomplete
delete_webhook: Incomplete
enable_webhook: Incomplete
get_webhook: Incomplete
list_webhooks: Incomplete
update_webhook: Incomplete
get_user_overview: Incomplete
list_organization_members: Incomplete
list_user_followers: Incomplete
list_user_following: Incomplete
