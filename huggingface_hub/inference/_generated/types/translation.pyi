from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any

TranslationTruncationStrategy: Incomplete

@dataclass
class TranslationParameters(BaseInferenceType):
    clean_up_tokenization_spaces: bool | None = ...
    generate_parameters: dict[str, Any] | None = ...
    src_lang: str | None = ...
    tgt_lang: str | None = ...
    truncation: TranslationTruncationStrategy | None = ...
    def __init__(self, clean_up_tokenization_spaces=..., generate_parameters=..., src_lang=..., tgt_lang=..., truncation=...) -> None: ...

@dataclass
class TranslationInput(BaseInferenceType):
    inputs: str
    parameters: TranslationParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class TranslationOutput(BaseInferenceType):
    translation_text: str
    def __init__(self, translation_text) -> None: ...
