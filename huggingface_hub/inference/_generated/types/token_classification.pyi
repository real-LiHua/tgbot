from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any

TokenClassificationAggregationStrategy: Incomplete

@dataclass
class TokenClassificationParameters(BaseInferenceType):
    aggregation_strategy: TokenClassificationAggregationStrategy | None = ...
    ignore_labels: list[str] | None = ...
    stride: int | None = ...
    def __init__(self, aggregation_strategy=..., ignore_labels=..., stride=...) -> None: ...

@dataclass
class TokenClassificationInput(BaseInferenceType):
    inputs: str
    parameters: TokenClassificationParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class TokenClassificationOutputElement(BaseInferenceType):
    label: Any
    score: float
    end: int | None = ...
    entity_group: str | None = ...
    start: int | None = ...
    word: str | None = ...
    def __init__(self, label, score, end=..., entity_group=..., start=..., word=...) -> None: ...
