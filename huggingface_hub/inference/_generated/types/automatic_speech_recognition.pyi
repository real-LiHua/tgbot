from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass

AutomaticSpeechRecognitionEarlyStoppingEnum: Incomplete

@dataclass
class AutomaticSpeechRecognitionGenerationParameters(BaseInferenceType):
    do_sample: bool | None = ...
    early_stopping: bool | AutomaticSpeechRecognitionEarlyStoppingEnum | None = ...
    epsilon_cutoff: float | None = ...
    eta_cutoff: float | None = ...
    max_length: int | None = ...
    max_new_tokens: int | None = ...
    min_length: int | None = ...
    min_new_tokens: int | None = ...
    num_beam_groups: int | None = ...
    num_beams: int | None = ...
    penalty_alpha: float | None = ...
    temperature: float | None = ...
    top_k: int | None = ...
    top_p: float | None = ...
    typical_p: float | None = ...
    use_cache: bool | None = ...
    def __init__(self, do_sample=..., early_stopping=..., epsilon_cutoff=..., eta_cutoff=..., max_length=..., max_new_tokens=..., min_length=..., min_new_tokens=..., num_beam_groups=..., num_beams=..., penalty_alpha=..., temperature=..., top_k=..., top_p=..., typical_p=..., use_cache=...) -> None: ...

@dataclass
class AutomaticSpeechRecognitionParameters(BaseInferenceType):
    generate: AutomaticSpeechRecognitionGenerationParameters | None = ...
    return_timestamps: bool | None = ...
    def __init__(self, generate=..., return_timestamps=...) -> None: ...

@dataclass
class AutomaticSpeechRecognitionInput(BaseInferenceType):
    inputs: str
    parameters: AutomaticSpeechRecognitionParameters | None = ...
    def __init__(self, inputs, parameters=...) -> None: ...

@dataclass
class AutomaticSpeechRecognitionOutputChunk(BaseInferenceType):
    text: str
    timestamps: list[float]
    def __init__(self, text, timestamps) -> None: ...

@dataclass
class AutomaticSpeechRecognitionOutput(BaseInferenceType):
    text: str
    chunks: list[AutomaticSpeechRecognitionOutputChunk] | None = ...
    def __init__(self, text, chunks=...) -> None: ...
