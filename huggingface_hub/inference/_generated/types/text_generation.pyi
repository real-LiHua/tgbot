from .base import BaseInferenceType as BaseInferenceType
from _typeshed import Incomplete
from dataclasses import dataclass
from typing import Any

TypeEnum: Incomplete

@dataclass
class TextGenerationInputGrammarType(BaseInferenceType):
    type: TypeEnum
    value: Any
    def __init__(self, type, value) -> None: ...

@dataclass
class TextGenerationInputGenerateParameters(BaseInferenceType):
    adapter_id: str | None = ...
    best_of: int | None = ...
    decoder_input_details: bool | None = ...
    details: bool | None = ...
    do_sample: bool | None = ...
    frequency_penalty: float | None = ...
    grammar: TextGenerationInputGrammarType | None = ...
    max_new_tokens: int | None = ...
    repetition_penalty: float | None = ...
    return_full_text: bool | None = ...
    seed: int | None = ...
    stop: list[str] | None = ...
    temperature: float | None = ...
    top_k: int | None = ...
    top_n_tokens: int | None = ...
    top_p: float | None = ...
    truncate: int | None = ...
    typical_p: float | None = ...
    watermark: bool | None = ...
    def __init__(self, adapter_id=..., best_of=..., decoder_input_details=..., details=..., do_sample=..., frequency_penalty=..., grammar=..., max_new_tokens=..., repetition_penalty=..., return_full_text=..., seed=..., stop=..., temperature=..., top_k=..., top_n_tokens=..., top_p=..., truncate=..., typical_p=..., watermark=...) -> None: ...

@dataclass
class TextGenerationInput(BaseInferenceType):
    inputs: str
    parameters: TextGenerationInputGenerateParameters | None = ...
    stream: bool | None = ...
    def __init__(self, inputs, parameters=..., stream=...) -> None: ...

TextGenerationOutputFinishReason: Incomplete

@dataclass
class TextGenerationOutputPrefillToken(BaseInferenceType):
    id: int
    logprob: float
    text: str
    def __init__(self, id, logprob, text) -> None: ...

@dataclass
class TextGenerationOutputToken(BaseInferenceType):
    id: int
    logprob: float
    special: bool
    text: str
    def __init__(self, id, logprob, special, text) -> None: ...

@dataclass
class TextGenerationOutputBestOfSequence(BaseInferenceType):
    finish_reason: TextGenerationOutputFinishReason
    generated_text: str
    generated_tokens: int
    prefill: list[TextGenerationOutputPrefillToken]
    tokens: list[TextGenerationOutputToken]
    seed: int | None = ...
    top_tokens: list[list[TextGenerationOutputToken]] | None = ...
    def __init__(self, finish_reason, generated_text, generated_tokens, prefill, tokens, seed=..., top_tokens=...) -> None: ...

@dataclass
class TextGenerationOutputDetails(BaseInferenceType):
    finish_reason: TextGenerationOutputFinishReason
    generated_tokens: int
    prefill: list[TextGenerationOutputPrefillToken]
    tokens: list[TextGenerationOutputToken]
    best_of_sequences: list[TextGenerationOutputBestOfSequence] | None = ...
    seed: int | None = ...
    top_tokens: list[list[TextGenerationOutputToken]] | None = ...
    def __init__(self, finish_reason, generated_tokens, prefill, tokens, best_of_sequences=..., seed=..., top_tokens=...) -> None: ...

@dataclass
class TextGenerationOutput(BaseInferenceType):
    generated_text: str
    details: TextGenerationOutputDetails | None = ...
    def __init__(self, generated_text, details=...) -> None: ...

@dataclass
class TextGenerationStreamOutputStreamDetails(BaseInferenceType):
    finish_reason: TextGenerationOutputFinishReason
    generated_tokens: int
    input_length: int
    seed: int | None = ...
    def __init__(self, finish_reason, generated_tokens, input_length, seed=...) -> None: ...

@dataclass
class TextGenerationStreamOutputToken(BaseInferenceType):
    id: int
    logprob: float
    special: bool
    text: str
    def __init__(self, id, logprob, special, text) -> None: ...

@dataclass
class TextGenerationStreamOutput(BaseInferenceType):
    index: int
    token: TextGenerationStreamOutputToken
    details: TextGenerationStreamOutputStreamDetails | None = ...
    generated_text: str | None = ...
    top_tokens: list[TextGenerationStreamOutputToken] | None = ...
    def __init__(self, index, token, details=..., generated_text=..., top_tokens=...) -> None: ...
