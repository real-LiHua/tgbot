from _typeshed import Incomplete
from pathlib import Path
from requests import HTTPError, Response as Response

class CacheNotFound(Exception):
    cache_dir: str | Path
    def __init__(self, msg: str, cache_dir: str | Path, *args, **kwargs) -> None: ...

class CorruptedCacheException(Exception): ...
class LocalTokenNotFoundError(EnvironmentError): ...
class OfflineModeIsEnabled(ConnectionError): ...

class HfHubHTTPError(HTTPError):
    request_id: Incomplete
    server_message: Incomplete
    def __init__(self, message: str, response: Response | None = None, *, server_message: str | None = None) -> None: ...
    args: Incomplete
    def append_to_message(self, additional_message: str) -> None: ...

class InferenceTimeoutError(HTTPError, TimeoutError): ...
class InferenceEndpointError(Exception): ...
class InferenceEndpointTimeoutError(InferenceEndpointError, TimeoutError): ...
class SafetensorsParsingError(Exception): ...
class NotASafetensorsRepoError(Exception): ...
class TextGenerationError(HTTPError): ...
class ValidationError(TextGenerationError): ...
class GenerationError(TextGenerationError): ...
class OverloadedError(TextGenerationError): ...
class IncompleteGenerationError(TextGenerationError): ...
class UnknownError(TextGenerationError): ...
class HFValidationError(ValueError): ...
class FileMetadataError(OSError): ...
class RepositoryNotFoundError(HfHubHTTPError): ...
class GatedRepoError(RepositoryNotFoundError): ...
class DisabledRepoError(HfHubHTTPError): ...
class RevisionNotFoundError(HfHubHTTPError): ...
class EntryNotFoundError(HfHubHTTPError): ...

class LocalEntryNotFoundError(EntryNotFoundError, FileNotFoundError, ValueError):
    def __init__(self, message: str) -> None: ...

class BadRequestError(HfHubHTTPError, ValueError): ...
